## (This license blatantly stolen from Tktable and Tcl/Tk license and adapted -
## thus assume it falls under similar license terms).
##
## This software is copyrighted by Jos Decoster <jos _dot_ decoster _at_ gmail 
## _dot_ com>.  The  following terms apply to all files associated with the 
## software unless explicitly disclaimed in individual files.
##
## The authors hereby grant permission to use, copy, modify, distribute, and
## license this software and its documentation for any purpose, provided that
## existing copyright notices are retained in all copies and that this notice
## is included verbatim in any distributions.  No written agreement, license,
## or royalty fee is required for any of the authorized uses.
##
## IN NO EVENT SHALL THE AUTHORS OR DISTRIBUTORS BE LIABLE TO ANY PARTY FOR
## DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT
## OF THE USE OF THIS SOFTWARE, ITS DOCUMENTATION, OR ANY DERIVATIVES THEREOF,
## EVEN IF THE AUTHORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##
## THE AUTHORS AND DISTRIBUTORS SPECIFICALLY DISCLAIM ANY WARRANTIES,
## INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.  THIS SOFTWARE IS
## PROVIDED ON AN "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE NO
## OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
## MODIFICATIONS.
##
## RESTRICTED RIGHTS: Use, duplication or disclosure by the U.S. government
## is subject to the restrictions as set forth in subparagraph (c) (1) (ii)
## of the Rights in Technical Data and Computer Software Clause as DFARS
## 252.227-7013 and FAR 52.227-19.

lappend auto_path .
package require tcltest
package require midi

##
## Event tests
##

# Test for each event type:
#
#  0. create default event
#  1. create event with option/value pair and option/value pair combinations, 
#     unknown option, invalid value
#  2. configure
#  3. configure option, unknown option
#  4. configure option/value pair and option/value pair combinations, unkown 
#     option, invalid value
#  5. cget, unknown option
#  6. dump, flatten
#  7. validate, invalid byte list
#  8. validate option, invalid values, invalid option
#  9. reset
# 10. type/type_meta_event

## sequence_number

tcltest::test events-1.0 {sequence_number} {
    midi::event sequence_number
} {0xFF 0x00 0x00}

tcltest::test events-1.1.1 {sequence_number} {
    midi::event sequence_number -value 0
} {0xFF 0x00 0x00}

tcltest::test events-1.1.2 {sequence_number} {
    midi::event sequence_number -value 100
} {0xFF 0x00 0x02 0x00 0x64}

tcltest::test events-1.1.3 {sequence_number} {
    catch {midi::event sequence_number -value 1000000} msg
    set msg
} {Invalid value '1000000' for option '-value' for event of type 'sequence_number'. Value must be integer in range [0..65535].}

tcltest::test events-1.1.4 {sequence_number} {
    catch {midi::event sequence_number -qwerty 0} msg
    set msg
} {Invalid option '-qwerty' for event of type 'sequence_number'. Known options for this event type are: -value}

tcltest::test events-1.2 {sequence_number} {
    set e [midi::event sequence_number -value 100]
    midi::event::configure $e
} {{-value 0 100}}

tcltest::test events-1.3 {sequence_number} {
    set e [midi::event sequence_number -value 100]
    midi::event::configure $e -value
} {-value 0 100}

tcltest::test events-1.4.1 {sequence_number} {
    set e [midi::event sequence_number]
    midi::event::configure $e -value 0
} {0xFF 0x00 0x00}

tcltest::test events-1.4.2 {sequence_number} {
    set e [midi::event sequence_number]
    midi::event::configure $e -value 100
} {0xFF 0x00 0x02 0x00 0x64}

tcltest::test events-1.4.3 {sequence_number} {
    set e [midi::event sequence_number]
    midi::event::configure $e -value 1024
} {0xFF 0x00 0x02 0x04 0x00}

tcltest::test events-1.4.4 {sequence_number} {
    set e [midi::event sequence_number]
    catch {midi::event::configure $e -value 1000000} msg
    set msg
} {Invalid value '1000000' for option '-value' for event of type 'sequence_number'. Value must be integer in range [0..65535].}

tcltest::test events-1.4.5 {sequence_number} {
    set e [midi::event sequence_number]
    catch {midi::event::configure $e -qwerty 123} msg
    set msg
} {Invalid option '-qwerty' for event of type 'sequence_number'. Known options for this event type are: -value}

tcltest::test events-1.5.1 {sequence_number} {
    set e [midi::event sequence_number -value 100]
    midi::event::cget $e -value
} {100}

tcltest::test events-1.5.2 {sequence_number} {
    set e [midi::event sequence_number -value 100]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'sequence_number'. Known options for this event type are: -value}

tcltest::test events-1.6 {sequence_number} {
    set e [midi::event sequence_number -value 100]
    midi::event::dump $e
} {sequence_number 100}

tcltest::test events-1.7.1 {sequence_number} {
    set e [midi::event sequence_number -value 100]
    midi::event::validate $e
} {}

tcltest::test events-1.7.2 {sequence_number} {
    catch {midi::event::validate {0xFF 0x00 0x03 0x00 0x00 0x64}} msg
    set msg
} {sequence_number must have length 2 and 2 bytes values : {0xFF 0x00 0x03 0x00 0x00 0x64}}

tcltest::test events-1.8.1 {sequence_number} {
    set e [midi::event sequence_number -value 100]
    midi::event::validate_option $e -value 98
} {}

tcltest::test events-1.8.2 {sequence_number} {
    set e [midi::event sequence_number -value 100]
    catch {midi::event::validate_option $e -value 99999999} msg
    set msg
} {Invalid value '99999999' for option '-value' for event of type 'sequence_number'. Value must be integer in range [0..65535].}

tcltest::test events-1.8.3 {sequence_number} {
    set e [midi::event sequence_number -value 100]
    catch {midi::event::validate_option $e -qwerty 99999999} msg
    set msg
} {Invalid option '-qwerty' for event of type 'sequence_number'. Known options for this event type are: -value}

tcltest::test events-1.9 {sequence_number} {
    set e [midi::event sequence_number -value 100]
    set r [midi::event::reset $e]
    list $e $r
} {{0xFF 0x00 0x02 0x00 0x64} {0xFF 0x00 0x00}}

tcltest::test events-1.10 {sequence_number} {
    set e [midi::event sequence_number -value 100]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta sequence_number}

## text

tcltest::test events-2.0 {text} {
    midi::event text
} {0xFF 0x01 0x00}

tcltest::test events-2.1.1 {text} {
    midi::event text -value "Some text for the midi file"
} {0xFF 0x01 0x1B 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x65 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-2.1.2 {text} {
    catch {midi::event text -qwerty "Some text for the midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'text'. Known options for this event type are: -value}

tcltest::test events-2.2 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    midi::event::configure $e
} {{-value {} {Some text for the midi file}}}

tcltest::test events-2.3.1 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    midi::event::configure $e -value
} {-value {} {Some text for the midi file}}

tcltest::test events-2.3.2 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'text'. Known options for this event type are: -value}

tcltest::test events-2.4.1 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    midi::event::configure $e -value "Some text for this midi file"
} {0xFF 0x01 0x1C 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x69 0x73 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-2.4.2 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty "Some text for this midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'text'. Known options for this event type are: -value}

tcltest::test events-2.4.3 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    midi::event::configure $e -value ""
} {0xFF 0x01 0x00}

tcltest::test events-2.5.1 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    midi::event::cget $e -value
} {Some text for the midi file}

tcltest::test events-2.5.2 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'text'. Known options for this event type are: -value}

tcltest::test events-2.6 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    midi::event::dump $e
} {text Some text for the midi file}

tcltest::test events-2.7.1 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    midi::event::validate $e
} {}

tcltest::test events-2.7.2 {text} {
    catch {midi::event::validate {0xFF 0x01 0x10}} msg
    set msg
} {text length should be 16 but it was 0}

tcltest::test events-2.8.1 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    midi::event::validate_option $e -value "More text"
} {}

tcltest::test events-2.8.2 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    midi::event::validate_option $e -value ""
} {}

tcltest::test events-2.8.3 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    catch {midi::event::validate_option $e -qwerty ""} msg
    set msg
} {Invalid option '-qwerty' for event of type 'text'. Known options for this event type are: -value}

tcltest::test events-2.9 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    midi::event::reset $e
} {0xFF 0x01 0x00}

tcltest::test events-2.10 {text} {
    set e [midi::event text -value "Some text for the midi file"]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta text}

## copyright

tcltest::test events-3.0 {copyright} {
    midi::event copyright
} {0xFF 0x02 0x00}

tcltest::test events-3.1.1 {copyright} {
    midi::event copyright -value "Some text for the midi file"
} {0xFF 0x02 0x1B 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x65 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-3.1.2 {copyright} {
    catch {midi::event copyright -qwerty "Some text for the midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'copyright'. Known options for this event type are: -value}

tcltest::test events-3.2 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    midi::event::configure $e
} {{-value {} {Some text for the midi file}}}

tcltest::test events-3.3.1 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    midi::event::configure $e -value
} {-value {} {Some text for the midi file}}

tcltest::test events-3.3.2 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'copyright'. Known options for this event type are: -value}

tcltest::test events-3.4.1 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    midi::event::configure $e -value "Some text for this midi file"
} {0xFF 0x02 0x1C 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x69 0x73 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-3.4.2 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty "Some text for this midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'copyright'. Known options for this event type are: -value}

tcltest::test events-3.4.3 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    midi::event::configure $e -value ""
} {0xFF 0x02 0x00}

tcltest::test events-3.5.1 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    midi::event::cget $e -value
} {Some text for the midi file}

tcltest::test events-3.5.2 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'copyright'. Known options for this event type are: -value}

tcltest::test events-3.6 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    midi::event::dump $e
} {copyright Some text for the midi file}

tcltest::test events-3.7.1 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    midi::event::validate $e
} {}

tcltest::test events-3.7.2 {text} {
    catch {midi::event::validate {0xFF 0x02 0x10}} msg
    set msg
} {text length should be 16 but it was 0}

tcltest::test events-3.8.1 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    midi::event::validate_option $e -value "More text"
} {}

tcltest::test events-3.8.2 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    midi::event::validate_option $e -value ""
} {}

tcltest::test events-3.8.3 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    catch {midi::event::validate_option $e -qwerty ""} msg
    set msg
} {Invalid option '-qwerty' for event of type 'copyright'. Known options for this event type are: -value}

tcltest::test events-3.9 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    midi::event::reset $e
} {0xFF 0x02 0x00}

tcltest::test events-3.10 {copyright} {
    set e [midi::event copyright -value "Some text for the midi file"]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta copyright}

## track_name

tcltest::test events-4.0 {track_name} {
    midi::event track_name
} {0xFF 0x03 0x00}

tcltest::test events-4.1.1 {track_name} {
    midi::event track_name -value "Some text for the midi file"
} {0xFF 0x03 0x1B 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x65 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-4.1.2 {track_name} {
    catch {midi::event track_name -qwerty "Some text for the midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'track_name'. Known options for this event type are: -value}

tcltest::test events-4.2 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    midi::event::configure $e
} {{-value {} {Some text for the midi file}}}

tcltest::test events-4.3.1 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    midi::event::configure $e -value
} {-value {} {Some text for the midi file}}

tcltest::test events-4.3.2 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'track_name'. Known options for this event type are: -value}

tcltest::test events-4.4.1 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    midi::event::configure $e -value "Some text for this midi file"
} {0xFF 0x03 0x1C 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x69 0x73 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-4.4.2 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty "Some text for this midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'track_name'. Known options for this event type are: -value}

tcltest::test events-4.4.3 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    midi::event::configure $e -value ""
} {0xFF 0x03 0x00}

tcltest::test events-4.5.1 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    midi::event::cget $e -value
} {Some text for the midi file}

tcltest::test events-4.5.2 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'track_name'. Known options for this event type are: -value}

tcltest::test events-4.6 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    midi::event::dump $e
} {track_name Some text for the midi file}

tcltest::test events-4.7.1 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    midi::event::validate $e
} {}

tcltest::test events-4.7.2 {text} {
    catch {midi::event::validate {0xFF 0x03 0x10}} msg
    set msg
} {text length should be 16 but it was 0}

tcltest::test events-4.8.1 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    midi::event::validate_option $e -value "More text"
} {}

tcltest::test events-4.8.2 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    midi::event::validate_option $e -value ""
} {}

tcltest::test events-4.8.3 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    catch {midi::event::validate_option $e -qwerty ""} msg
    set msg
} {Invalid option '-qwerty' for event of type 'track_name'. Known options for this event type are: -value}

tcltest::test events-4.9 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    midi::event::reset $e
} {0xFF 0x03 0x00}

tcltest::test events-4.10 {track_name} {
    set e [midi::event track_name -value "Some text for the midi file"]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta track_name}

## instrument_name

tcltest::test events-5.0 {instrument_name} {
    midi::event instrument_name
} {0xFF 0x04 0x00}

tcltest::test events-5.1.1 {instrument_name} {
    midi::event instrument_name -value "Some text for the midi file"
} {0xFF 0x04 0x1B 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x65 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-5.1.2 {instrument_name} {
    catch {midi::event instrument_name -qwerty "Some text for the midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'instrument_name'. Known options for this event type are: -value}

tcltest::test events-5.2 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    midi::event::configure $e
} {{-value {} {Some text for the midi file}}}

tcltest::test events-5.3.1 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    midi::event::configure $e -value
} {-value {} {Some text for the midi file}}

tcltest::test events-5.3.2 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'instrument_name'. Known options for this event type are: -value}

tcltest::test events-5.4.1 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    midi::event::configure $e -value "Some text for this midi file"
} {0xFF 0x04 0x1C 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x69 0x73 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-5.4.2 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty "Some text for this midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'instrument_name'. Known options for this event type are: -value}

tcltest::test events-5.4.3 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    midi::event::configure $e -value ""
} {0xFF 0x04 0x00}

tcltest::test events-5.5.1 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    midi::event::cget $e -value
} {Some text for the midi file}

tcltest::test events-5.5.2 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'instrument_name'. Known options for this event type are: -value}

tcltest::test events-5.6 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    midi::event::dump $e
} {instrument_name Some text for the midi file}

tcltest::test events-5.7.1 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    midi::event::validate $e
} {}

tcltest::test events-5.7.2 {text} {
    catch {midi::event::validate {0xFF 0x04 0x10}} msg
    set msg
} {text length should be 16 but it was 0}

tcltest::test events-5.8.1 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    midi::event::validate_option $e -value "More text"
} {}

tcltest::test events-5.8.2 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    midi::event::validate_option $e -value ""
} {}

tcltest::test events-5.8.3 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    catch {midi::event::validate_option $e -qwerty ""} msg
    set msg
} {Invalid option '-qwerty' for event of type 'instrument_name'. Known options for this event type are: -value}

tcltest::test events-5.9 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    midi::event::reset $e
} {0xFF 0x04 0x00}

tcltest::test events-5.10 {instrument_name} {
    set e [midi::event instrument_name -value "Some text for the midi file"]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta instrument_name}

## lyric

tcltest::test events-6.0 {lyric} {
    midi::event lyric
} {0xFF 0x05 0x00}

tcltest::test events-6.1.1 {lyric} {
    midi::event lyric -value "Some text for the midi file"
} {0xFF 0x05 0x1B 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x65 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-6.1.2 {lyric} {
    catch {midi::event lyric -qwerty "Some text for the midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'lyric'. Known options for this event type are: -value}

tcltest::test events-6.2 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    midi::event::configure $e
} {{-value {} {Some text for the midi file}}}

tcltest::test events-6.3.1 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    midi::event::configure $e -value
} {-value {} {Some text for the midi file}}

tcltest::test events-6.3.2 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'lyric'. Known options for this event type are: -value}

tcltest::test events-6.4.1 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    midi::event::configure $e -value "Some text for this midi file"
} {0xFF 0x05 0x1C 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x69 0x73 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-6.4.2 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty "Some text for this midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'lyric'. Known options for this event type are: -value}

tcltest::test events-6.4.3 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    midi::event::configure $e -value ""
} {0xFF 0x05 0x00}

tcltest::test events-6.5.1 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    midi::event::cget $e -value
} {Some text for the midi file}

tcltest::test events-6.5.2 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'lyric'. Known options for this event type are: -value}

tcltest::test events-6.6 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    midi::event::dump $e
} {lyric Some text for the midi file}

tcltest::test events-6.7.1 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    midi::event::validate $e
} {}

tcltest::test events-6.7.2 {text} {
    catch {midi::event::validate {0xFF 0x05 0x10}} msg
    set msg
} {text length should be 16 but it was 0}

tcltest::test events-6.8.1 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    midi::event::validate_option $e -value "More text"
} {}

tcltest::test events-6.8.2 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    midi::event::validate_option $e -value ""
} {}

tcltest::test events-6.8.3 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    catch {midi::event::validate_option $e -qwerty ""} msg
    set msg
} {Invalid option '-qwerty' for event of type 'lyric'. Known options for this event type are: -value}

tcltest::test events-6.9 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    midi::event::reset $e
} {0xFF 0x05 0x00}

tcltest::test events-6.10 {lyric} {
    set e [midi::event lyric -value "Some text for the midi file"]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta lyric}

## marker

tcltest::test events-7.0 {marker} {
    midi::event marker
} {0xFF 0x06 0x00}

tcltest::test events-7.1.1 {marker} {
    midi::event marker -value "Some text for the midi file"
} {0xFF 0x06 0x1B 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x65 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-7.1.2 {marker} {
    catch {midi::event marker -qwerty "Some text for the midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'marker'. Known options for this event type are: -value}

tcltest::test events-7.2 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    midi::event::configure $e
} {{-value {} {Some text for the midi file}}}

tcltest::test events-7.3.1 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    midi::event::configure $e -value
} {-value {} {Some text for the midi file}}

tcltest::test events-7.3.2 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'marker'. Known options for this event type are: -value}

tcltest::test events-7.4.1 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    midi::event::configure $e -value "Some text for this midi file"
} {0xFF 0x06 0x1C 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x69 0x73 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-7.4.2 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty "Some text for this midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'marker'. Known options for this event type are: -value}

tcltest::test events-7.4.3 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    midi::event::configure $e -value ""
} {0xFF 0x06 0x00}

tcltest::test events-7.5.1 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    midi::event::cget $e -value
} {Some text for the midi file}

tcltest::test events-7.5.2 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'marker'. Known options for this event type are: -value}

tcltest::test events-7.6 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    midi::event::dump $e
} {marker Some text for the midi file}

tcltest::test events-7.7.1 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    midi::event::validate $e
} {}

tcltest::test events-7.7.2 {text} {
    catch {midi::event::validate {0xFF 0x06 0x10}} msg
    set msg
} {text length should be 16 but it was 0}

tcltest::test events-7.8.1 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    midi::event::validate_option $e -value "More text"
} {}

tcltest::test events-7.8.2 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    midi::event::validate_option $e -value ""
} {}

tcltest::test events-7.8.3 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    catch {midi::event::validate_option $e -qwerty ""} msg
    set msg
} {Invalid option '-qwerty' for event of type 'marker'. Known options for this event type are: -value}

tcltest::test events-7.9 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    midi::event::reset $e
} {0xFF 0x06 0x00}

tcltest::test events-7.10 {marker} {
    set e [midi::event marker -value "Some text for the midi file"]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta marker}

## cue_point

tcltest::test events-8.0 {cue_point} {
    midi::event cue_point
} {0xFF 0x07 0x00}

tcltest::test events-8.1.1 {cue_point} {
    midi::event cue_point -value "Some text for the midi file"
} {0xFF 0x07 0x1B 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x65 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-8.1.2 {cue_point} {
    catch {midi::event cue_point -qwerty "Some text for the midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'cue_point'. Known options for this event type are: -value}

tcltest::test events-8.2 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    midi::event::configure $e
} {{-value {} {Some text for the midi file}}}

tcltest::test events-8.3.1 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    midi::event::configure $e -value
} {-value {} {Some text for the midi file}}

tcltest::test events-8.3.2 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'cue_point'. Known options for this event type are: -value}

tcltest::test events-8.4.1 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    midi::event::configure $e -value "Some text for this midi file"
} {0xFF 0x07 0x1C 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x69 0x73 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-8.4.2 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty "Some text for this midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'cue_point'. Known options for this event type are: -value}

tcltest::test events-8.4.3 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    midi::event::configure $e -value ""
} {0xFF 0x07 0x00}

tcltest::test events-8.5.1 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    midi::event::cget $e -value
} {Some text for the midi file}

tcltest::test events-8.5.2 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'cue_point'. Known options for this event type are: -value}

tcltest::test events-8.6 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    midi::event::dump $e
} {cue_point Some text for the midi file}

tcltest::test events-8.7.1 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    midi::event::validate $e
} {}

tcltest::test events-8.7.2 {text} {
    catch {midi::event::validate {0xFF 0x07 0x10}} msg
    set msg
} {text length should be 16 but it was 0}

tcltest::test events-8.8.1 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    midi::event::validate_option $e -value "More text"
} {}

tcltest::test events-8.8.2 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    midi::event::validate_option $e -value ""
} {}

tcltest::test events-8.8.3 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    catch {midi::event::validate_option $e -qwerty ""} msg
    set msg
} {Invalid option '-qwerty' for event of type 'cue_point'. Known options for this event type are: -value}

tcltest::test events-8.9 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    midi::event::reset $e
} {0xFF 0x07 0x00}

tcltest::test events-8.10 {cue_point} {
    set e [midi::event cue_point -value "Some text for the midi file"]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta cue_point}

## program_name

tcltest::test events-9.0 {program_name} {
    midi::event program_name
} {0xFF 0x08 0x00}

tcltest::test events-9.1.1 {program_name} {
    midi::event program_name -value "Some text for the midi file"
} {0xFF 0x08 0x1B 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x65 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-9.1.2 {program_name} {
    catch {midi::event program_name -qwerty "Some text for the midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'program_name'. Known options for this event type are: -value}

tcltest::test events-9.2 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    midi::event::configure $e
} {{-value {} {Some text for the midi file}}}

tcltest::test events-9.3.1 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    midi::event::configure $e -value
} {-value {} {Some text for the midi file}}

tcltest::test events-9.3.2 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'program_name'. Known options for this event type are: -value}

tcltest::test events-9.4.1 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    midi::event::configure $e -value "Some text for this midi file"
} {0xFF 0x08 0x1C 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x69 0x73 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-9.4.2 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty "Some text for this midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'program_name'. Known options for this event type are: -value}

tcltest::test events-9.4.3 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    midi::event::configure $e -value ""
} {0xFF 0x08 0x00}

tcltest::test events-9.5.1 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    midi::event::cget $e -value
} {Some text for the midi file}

tcltest::test events-9.5.2 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'program_name'. Known options for this event type are: -value}

tcltest::test events-9.6 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    midi::event::dump $e
} {program_name Some text for the midi file}

tcltest::test events-9.7.1 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    midi::event::validate $e
} {}

tcltest::test events-9.7.2 {text} {
    catch {midi::event::validate {0xFF 0x08 0x10}} msg
    set msg
} {text length should be 16 but it was 0}

tcltest::test events-9.8.1 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    midi::event::validate_option $e -value "More text"
} {}

tcltest::test events-9.8.2 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    midi::event::validate_option $e -value ""
} {}

tcltest::test events-9.8.3 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    catch {midi::event::validate_option $e -qwerty ""} msg
    set msg
} {Invalid option '-qwerty' for event of type 'program_name'. Known options for this event type are: -value}

tcltest::test events-9.9 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    midi::event::reset $e
} {0xFF 0x08 0x00}

tcltest::test events-9.10 {program_name} {
    set e [midi::event program_name -value "Some text for the midi file"]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta program_name}

## device_name

tcltest::test events-10.0 {device_name} {
    midi::event device_name
} {0xFF 0x09 0x00}

tcltest::test events-10.1.1 {device_name} {
    midi::event device_name -value "Some text for the midi file"
} {0xFF 0x09 0x1B 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x65 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-10.1.2 {device_name} {
    catch {midi::event device_name -qwerty "Some text for the midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'device_name'. Known options for this event type are: -value}

tcltest::test events-10.2 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    midi::event::configure $e
} {{-value {} {Some text for the midi file}}}

tcltest::test events-10.3.1 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    midi::event::configure $e -value
} {-value {} {Some text for the midi file}}

tcltest::test events-10.3.2 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'device_name'. Known options for this event type are: -value}

tcltest::test events-10.4.1 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    midi::event::configure $e -value "Some text for this midi file"
} {0xFF 0x09 0x1C 0x53 0x6F 0x6D 0x65 0x20 0x74 0x65 0x78 0x74 0x20 0x66 0x6F 0x72 0x20 0x74 0x68 0x69 0x73 0x20 0x6D 0x69 0x64 0x69 0x20 0x66 0x69 0x6C 0x65}

tcltest::test events-10.4.2 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    catch {midi::event::configure $e -qwerty "Some text for this midi file"} msg
    set msg
} {Invalid option '-qwerty' for event of type 'device_name'. Known options for this event type are: -value}

tcltest::test events-10.4.3 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    midi::event::configure $e -value ""
} {0xFF 0x09 0x00}

tcltest::test events-10.5.1 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    midi::event::cget $e -value
} {Some text for the midi file}

tcltest::test events-10.5.2 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'device_name'. Known options for this event type are: -value}

tcltest::test events-10.6 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    midi::event::dump $e
} {device_name Some text for the midi file}

tcltest::test events-10.7.1 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    midi::event::validate $e
} {}

tcltest::test events-10.7.2 {text} {
    catch {midi::event::validate {0xFF 0x09 0x10}} msg
    set msg
} {text length should be 16 but it was 0}

tcltest::test events-10.8.1 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    midi::event::validate_option $e -value "More text"
} {}

tcltest::test events-10.8.2 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    midi::event::validate_option $e -value ""
} {}

tcltest::test events-10.8.3 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    catch {midi::event::validate_option $e -qwerty ""} msg
    set msg
} {Invalid option '-qwerty' for event of type 'device_name'. Known options for this event type are: -value}

tcltest::test events-10.9 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    midi::event::reset $e
} {0xFF 0x09 0x00}

tcltest::test events-10.10 {device_name} {
    set e [midi::event device_name -value "Some text for the midi file"]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta device_name}

## channel

tcltest::test events-11.0 {channel} {
    midi::event channel
} {0xFF 0x20 0x01 0x00}

tcltest::test events-11.1.1 {channel} {
    midi::event channel -channel 0
} {0xFF 0x20 0x01 0x00}

tcltest::test events-11.1.2 {channel} {
    midi::event channel -channel 1
} {0xFF 0x20 0x01 0x01}

tcltest::test events-11.1.3 {channel} {
    catch {midi::event channel -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'channel'. Value must be integer in range [0..15].}

tcltest::test events-11.1.4 {channel} {
    catch {midi::event channel -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'channel'. Value must be integer in range [0..15].}

tcltest::test events-11.1.5 {channel} {
    catch {midi::event channel -qwerty 20} msg
    set msg
} {Invalid option '-qwerty' for event of type 'channel'. Known options for this event type are: -channel}

tcltest::test events-11.2 {channel} {
    set e [midi::event channel -channel 4]
    midi::event::configure $e
} {{-channel 0 4}}

tcltest::test events-11.3.1 {channel} {
    set e [midi::event channel -channel 4]
    midi::event::configure $e -channel
} {-channel 0 4}

tcltest::test events-11.3.2 {channel} {
    set e [midi::event channel -channel 4]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'channel'. Known options for this event type are: -channel}

tcltest::test events-11.4.1 {channel} {
    set e [midi::event channel -channel 4]
    midi::event::configure $e -channel 5
} {0xFF 0x20 0x01 0x05}

tcltest::test events-11.4.2 {channel} {
    set e [midi::event channel -channel 4]
    catch {midi::event::configure $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'channel'. Value must be integer in range [0..15].}

tcltest::test events-11.4.3 {channel} {
    set e [midi::event channel -channel 4]
    catch {midi::event::configure $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'channel'. Value must be integer in range [0..15].}

tcltest::test events-11.4.4 {channel} {
    set e [midi::event channel -channel 4]
    catch {midi::event::configure $e -qwerty 0} msg
    set msg
} {Invalid option '-qwerty' for event of type 'channel'. Known options for this event type are: -channel}

tcltest::test events-11.5.1 {channel} {
    set e [midi::event channel -channel 4]
    midi::event::cget $e -channel
} {4}

tcltest::test events-11.5.2 {channel} {
    set e [midi::event channel -channel 4]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'channel'. Known options for this event type are: -channel}

tcltest::test events-11.6 {channel} {
    set e [midi::event channel -channel 4]
    midi::event::dump $e
} {channel 4}

tcltest::test events-11.7.1 {channel} {
    set e [midi::event channel -channel 4]
    midi::event::validate $e
} {}

tcltest::test events-11.7.2 {channel} {
    catch {midi::event::validate {0xFF 0x20 0x00}} msg
    set msg
} {channel event must have the value 0x01 as the third byte}

tcltest::test events-11.7.3 {channel} {
    catch {midi::event::validate {0xFF 0x20 0x01}} msg
    set msg
} {number of elements in list does not match count}

tcltest::test events-11.7.4 {channel} {
    catch {midi::event::validate {0xFF 0x20 0x01 0xFF}} msg
    set msg
} {Invalid value '255' for option '-channel' for event of type 'channel'. Value must be integer in range [0..15].}

tcltest::test events-11.7.5 {channel} {
    catch {midi::event::validate {0xFF 0x20 0x01 0x10}} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'channel'. Value must be integer in range [0..15].}

tcltest::test events-11.8.1 {channel} {
    set e [midi::event channel -channel 4]
    midi::event::validate_option $e -channel 6
} {}

tcltest::test events-11.8.2 {channel} {
    set e [midi::event channel -channel 4]
    catch {midi::event::validate_option $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'channel'. Value must be integer in range [0..15].}

tcltest::test events-11.8.3 {channel} {
    set e [midi::event channel -channel 4]
    catch {midi::event::validate_option $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'channel'. Value must be integer in range [0..15].}

tcltest::test events-11.8.4 {channel} {
    set e [midi::event channel -channel 4]
    catch {midi::event::validate_option $e -qwerty 6} msg
    set msg
} {Invalid option '-qwerty' for event of type 'channel'. Known options for this event type are: -channel}

tcltest::test events-11.9 {channel} {
    set e [midi::event channel -channel 10]
    midi::event::reset $e
} {0xFF 0x20 0x01 0x00}

tcltest::test events-11.10 {channel} {
    set e [midi::event channel]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta channel}

## port

tcltest::test events-12.0 {port} {
    midi::event port
} {0xFF 0x21 0x01 0x00}

tcltest::test events-12.1.1 {port} {
    midi::event port -port 0
} {0xFF 0x21 0x01 0x00}

tcltest::test events-12.1.2 {port} {
    midi::event port -port 1
} {0xFF 0x21 0x01 0x01}

tcltest::test events-12.1.3 {port} {
    catch {midi::event port -port 128} msg
    set msg
} {Invalid value '128' for option '-port' for event of type 'port'. Value must be integer in range [0..127].}

tcltest::test events-12.1.4 {port} {
    catch {midi::event port -port -1} msg
    set msg
} {Invalid value '-1' for option '-port' for event of type 'port'. Value must be integer in range [0..127].}

tcltest::test events-12.1.5 {port} {
    catch {midi::event port -qwerty 20} msg
    set msg
} {Invalid option '-qwerty' for event of type 'port'. Known options for this event type are: -port}

tcltest::test events-12.2 {port} {
    set e [midi::event port -port 4]
    midi::event::configure $e
} {{-port 0 4}}

tcltest::test events-12.3.1 {port} {
    set e [midi::event port -port 4]
    midi::event::configure $e -port
} {-port 0 4}

tcltest::test events-12.3.2 {port} {
    set e [midi::event port -port 4]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'port'. Known options for this event type are: -port}

tcltest::test events-12.4.1 {port} {
    set e [midi::event port -port 4]
    midi::event::configure $e -port 5
} {0xFF 0x21 0x01 0x05}

tcltest::test events-12.4.2 {port} {
    set e [midi::event port -port 4]
    catch {midi::event::configure $e -port 128} msg
    set msg
} {Invalid value '128' for option '-port' for event of type 'port'. Value must be integer in range [0..127].}

tcltest::test events-12.4.3 {port} {
    set e [midi::event port -port 4]
    catch {midi::event::configure $e -port -1} msg
    set msg
} {Invalid value '-1' for option '-port' for event of type 'port'. Value must be integer in range [0..127].}

tcltest::test events-12.4.4 {port} {
    set e [midi::event port -port 4]
    catch {midi::event::configure $e -qwerty 0} msg
    set msg
} {Invalid option '-qwerty' for event of type 'port'. Known options for this event type are: -port}

tcltest::test events-12.5.1 {port} {
    set e [midi::event port -port 4]
    midi::event::cget $e -port
} {4}

tcltest::test events-12.5.2 {port} {
    set e [midi::event port -port 4]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'port'. Known options for this event type are: -port}

tcltest::test events-12.6 {port} {
    set e [midi::event port -port 4]
    midi::event::dump $e
} {port 4}

tcltest::test events-12.7.1 {port} {
    set e [midi::event port -port 4]
    midi::event::validate $e
} {}

tcltest::test events-12.7.2 {port} {
    catch {midi::event::validate {0xFF 0x21 0x00}} msg
    set msg
} {port event must have the value 0x01 as the third byte}

tcltest::test events-12.7.3 {port} {
    catch {midi::event::validate {0xFF 0x21 0x01}} msg
    set msg
} {number of elements in list does not match count}

tcltest::test events-12.7.4 {port} {
    catch {midi::event::validate {0xFF 0x21 0x01 0xFF}} msg
    set msg
} {Invalid value '255' for option '-port' for event of type 'port'. Value must be integer in range [0..127].}

tcltest::test events-12.7.5 {port} {
    catch {midi::event::validate {0xFF 0x21 0x01 0x80}} msg
    set msg
} {Invalid value '128' for option '-port' for event of type 'port'. Value must be integer in range [0..127].}

tcltest::test events-12.8.1 {port} {
    set e [midi::event port -port 4]
    midi::event::validate_option $e -port 6
} {}

tcltest::test events-12.8.2 {port} {
    set e [midi::event port -port 4]
    catch {midi::event::validate_option $e -port -1} msg
    set msg
} {Invalid value '-1' for option '-port' for event of type 'port'. Value must be integer in range [0..127].}

tcltest::test events-12.8.3 {port} {
    set e [midi::event port -port 4]
    catch {midi::event::validate_option $e -port 128} msg
    set msg
} {Invalid value '128' for option '-port' for event of type 'port'. Value must be integer in range [0..127].}

tcltest::test events-12.8.4 {port} {
    set e [midi::event port -port 4]
    catch {midi::event::validate_option $e -qwerty 6} msg
    set msg
} {Invalid option '-qwerty' for event of type 'port'. Known options for this event type are: -port}

tcltest::test events-12.9 {port} {
    set e [midi::event port -port 10]
    midi::event::reset $e
} {0xFF 0x21 0x01 0x00}

tcltest::test events-12.10 {port} {
    set e [midi::event port]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta port}

## end_of_track

tcltest::test events-13.0 {end_of_track} {
    midi::event end_of_track
} {0xFF 0x2F 0x00}

tcltest::test events-13.1 {end_of_track} {
    catch {midi::event end_of_track -qwerty 1} msg
    set msg
} {Invalid option '-qwerty' for event of type 'end_of_track'. Known options for this event type are: }

tcltest::test events-13.2 {end_of_track} {
    set e [midi::event end_of_track]
    midi::event::configure $e
} {}

tcltest::test events-13.3 {end_of_track} {
    set e [midi::event end_of_track]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'end_of_track'. Known options for this event type are: }

tcltest::test events-13.4 {end_of_track} {
    set e [midi::event end_of_track]
    catch {midi::event::configure $e -qwerty 12} msg
    set msg
} {Invalid option '-qwerty' for event of type 'end_of_track'. Known options for this event type are: }

tcltest::test events-13.5 {end_of_track} {
    set e [midi::event end_of_track]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'end_of_track'. Known options for this event type are: }

tcltest::test events-13.6 {end_of_track} {
    set e [midi::event end_of_track]
    midi::event::dump $e
} {end_of_track}

tcltest::test events-13.7.1 {end_of_track} {
    set e [midi::event end_of_track]
    midi::event::validate $e
} {}

tcltest::test events-13.7.2 {end_of_track} {
    set e [midi::event end_of_track]
    catch {midi::event::validate {0xFF 0x2F 0x01}} msg
    set msg
} {end_of_track event must have the value 0x00 as the third byte}

tcltest::test events-13.7.3 {end_of_track} {
    set e [midi::event end_of_track]
    catch {midi::event::validate {0xFF 0x2F}} msg
    set msg
} {end_of_track event must have the value 0x00 as the third byte}

tcltest::test events-13.8 {end_of_track} {
    set e [midi::event end_of_track]
    catch {midi::event::validate_option $e -qwerty 12} msg
    set msg
} {Invalid option '-qwerty' for event of type 'end_of_track'. Known options for this event type are: }

tcltest::test events-13.9 {end_of_track} {
    set e [midi::event end_of_track]
    midi::event::reset $e
} {0xFF 0x2F 0x00}

tcltest::test events-13.10 {end_of_track} {
    set e [midi::event end_of_track]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta end_of_track}

## tempo

tcltest::test events-14.0 {tempo} {
    midi::event tempo
} {0xFF 0x51 0x03 0x07 0xA1 0x20}

tcltest::test events-14.1.1 {tempo} {
    midi::event tempo -tempo 0
} {0xFF 0x51 0x03 0x00 0x00 0x00}

tcltest::test events-14.1.2 {tempo} {
    midi::event tempo -tempo 1
} {0xFF 0x51 0x03 0x00 0x00 0x01}

tcltest::test events-14.1.3 {tempo} {
    catch {midi::event tempo -tempo 16777216} msg
    set msg
} {Invalid value '16777216' for option '-tempo' for event of type 'tempo'. Value must be integer in range [0..16777215].}

tcltest::test events-14.1.4 {tempo} {
    catch {midi::event tempo -tempo -1} msg
    set msg
} {Invalid value '-1' for option '-tempo' for event of type 'tempo'. Value must be integer in range [0..16777215].}

tcltest::test events-14.1.5 {tempo} {
    catch {midi::event tempo -qwerty 20} msg
    set msg
} {Invalid option '-qwerty' for event of type 'tempo'. Known options for this event type are: -tempo}

tcltest::test events-14.2 {tempo} {
    set e [midi::event tempo -tempo 4]
    midi::event::configure $e
} {{-tempo 0x07A120 4}}

tcltest::test events-14.3.1 {tempo} {
    set e [midi::event tempo -tempo 4]
    midi::event::configure $e -tempo
} {-tempo 0x07A120 4}

tcltest::test events-14.3.2 {tempo} {
    set e [midi::event tempo -tempo 4]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'tempo'. Known options for this event type are: -tempo}

tcltest::test events-14.4.1 {tempo} {
    set e [midi::event tempo -tempo 4]
    midi::event::configure $e -tempo 5
} {0xFF 0x51 0x03 0x00 0x00 0x05}

tcltest::test events-14.4.2 {tempo} {
    set e [midi::event tempo -tempo 4]
    catch {midi::event::configure $e -tempo 16777216} msg
    set msg
} {Invalid value '16777216' for option '-tempo' for event of type 'tempo'. Value must be integer in range [0..16777215].}

tcltest::test events-14.4.3 {tempo} {
    set e [midi::event tempo -tempo 4]
    catch {midi::event::configure $e -tempo -1} msg
    set msg
} {Invalid value '-1' for option '-tempo' for event of type 'tempo'. Value must be integer in range [0..16777215].}

tcltest::test events-14.4.4 {tempo} {
    set e [midi::event tempo -tempo 4]
    catch {midi::event::configure $e -qwerty 0} msg
    set msg
} {Invalid option '-qwerty' for event of type 'tempo'. Known options for this event type are: -tempo}

tcltest::test events-14.5.1 {tempo} {
    set e [midi::event tempo -tempo 4]
    midi::event::cget $e -tempo
} {4}

tcltest::test events-14.5.2 {tempo} {
    set e [midi::event tempo -tempo 4]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'tempo'. Known options for this event type are: -tempo}

tcltest::test events-14.6 {tempo} {
    set e [midi::event tempo -tempo 4]
    midi::event::dump $e
} {tempo 4}

tcltest::test events-14.7.1 {tempo} {
    set e [midi::event tempo -tempo 4]
    midi::event::validate $e
} {}

tcltest::test events-14.7.2 {tempo} {
    catch {midi::event::validate {0xFF 0x51 0x00}} msg
    set msg
} {tempo event must have the value 0x03 as the third byte}

tcltest::test events-14.7.3 {tempo} {
    catch {midi::event::validate {0xFF 0x51 0x03}} msg
    set msg
} {number of elements in list does not match count}

tcltest::test events-14.8.1 {tempo} {
    set e [midi::event tempo -tempo 4]
    midi::event::validate_option $e -tempo 6
} {}

tcltest::test events-14.8.2 {tempo} {
    set e [midi::event tempo -tempo 4]
    catch {midi::event::validate_option $e -tempo -1} msg
    set msg
} {Invalid value '-1' for option '-tempo' for event of type 'tempo'. Value must be integer in range [0..16777215].}

tcltest::test events-14.8.3 {tempo} {
    set e [midi::event tempo -tempo 4]
    catch {midi::event::validate_option $e -tempo 16777216} msg
    set msg
} {Invalid value '16777216' for option '-tempo' for event of type 'tempo'. Value must be integer in range [0..16777215].}

tcltest::test events-14.8.4 {tempo} {
    set e [midi::event tempo -tempo 4]
    catch {midi::event::validate_option $e -qwerty 6} msg
    set msg
} {Invalid option '-qwerty' for event of type 'tempo'. Known options for this event type are: -tempo}

tcltest::test events-14.9 {tempo} {
    set e [midi::event tempo -tempo 10]
    midi::event::reset $e
} {0xFF 0x51 0x03 0x07 0xA1 0x20}

tcltest::test events-14.10 {tempo} {
    set e [midi::event tempo]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta tempo}

## smpte_offset

tcltest::test events-15.0 {smpte_offset} {
    midi::event smpte_offset
} {0xFF 0x54 0x05 0x00 0x00 0x00 0x00 0x00}

tcltest::test events-15.1.1 {smpte_offset} {
    midi::event smpte_offset -hours 1
} {0xFF 0x54 0x05 0x01 0x00 0x00 0x00 0x00}

tcltest::test events-15.1.2 {smpte_offset} {
    midi::event smpte_offset -minutes 1
} {0xFF 0x54 0x05 0x00 0x01 0x00 0x00 0x00}

tcltest::test events-15.1.3 {smpte_offset} {
    midi::event smpte_offset -seconds 1
} {0xFF 0x54 0x05 0x00 0x00 0x01 0x00 0x00}

tcltest::test events-15.1.4 {smpte_offset} {
    midi::event smpte_offset -frames 1
} {0xFF 0x54 0x05 0x00 0x00 0x00 0x01 0x00}

tcltest::test events-15.1.5 {smpte_offset} {
    midi::event smpte_offset -framefractions 1
} {0xFF 0x54 0x05 0x00 0x00 0x00 0x00 0x01}

tcltest::test events-15.1.6 {smpte_offset} {
    midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5
} {0xFF 0x54 0x05 0x01 0x02 0x03 0x04 0x05}

tcltest::test events-15.1.7 {smpte_offset} {
    midi::event smpte_offset -framefractions 5 -frames 4 -seconds 3 -minutes 2 -hours 1
} {0xFF 0x54 0x05 0x01 0x02 0x03 0x04 0x05}

tcltest::test events-15.1.8 {smpte_offset} {
    catch {midi::event smpte_offset -hours 256} msg
    set msg
} {Invalid value '256' for option '-hours' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.1.9 {smpte_offset} {
    catch {midi::event smpte_offset -minutes 256} msg
    set msg
} {Invalid value '256' for option '-minutes' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.1.10 {smpte_offset} {
    catch {midi::event smpte_offset -seconds 256} msg
    set msg
} {Invalid value '256' for option '-seconds' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.1.11 {smpte_offset} {
    catch {midi::event smpte_offset -frames 256} msg
    set msg
} {Invalid value '256' for option '-frames' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.1.12 {smpte_offset} {
    catch {midi::event smpte_offset -framefractions 256} msg
    set msg
} {Invalid value '256' for option '-framefractions' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.1.13 {smpte_offset} {
    catch {midi::event smpte_offset -hours -1} msg
    set msg
} {Invalid value '-1' for option '-hours' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.1.14 {smpte_offset} {
    catch {midi::event smpte_offset -minutes -1} msg
    set msg
} {Invalid value '-1' for option '-minutes' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.1.15 {smpte_offset} {
    catch {midi::event smpte_offset -seconds -1} msg
    set msg
} {Invalid value '-1' for option '-seconds' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.1.16 {smpte_offset} {
    catch {midi::event smpte_offset -frames -1} msg
    set msg
} {Invalid value '-1' for option '-frames' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.1.17 {smpte_offset} {
    catch {midi::event smpte_offset -framefractions -1} msg
    set msg
} {Invalid value '-1' for option '-framefractions' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.1.18 {smpte_offset} {
    catch {midi::event smpte_offset -qwerty -1} msg
    set msg
} {Invalid option '-qwerty' for event of type 'smpte_offset'. Known options for this event type are: -hours -minutes -seconds -frames -framefractions}

tcltest::test events-15.2 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e
} {{-hours 0 0} {-minutes 0 0} {-seconds 0 0} {-frames 0 0} {-framefractions 0 0}}

tcltest::test events-15.3.1 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -hours
} {-hours 0 0}

tcltest::test events-15.3.2 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -minutes
} {-minutes 0 0}

tcltest::test events-15.3.3 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -seconds
} {-seconds 0 0}

tcltest::test events-15.3.4 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -frames
} {-frames 0 0}

tcltest::test events-15.3.5 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -framefractions
} {-framefractions 0 0}

tcltest::test events-15.3.6 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'smpte_offset'. Known options for this event type are: -hours -minutes -seconds -frames -framefractions}

tcltest::test events-15.4.1 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -hours 1
} {0xFF 0x54 0x05 0x01 0x00 0x00 0x00 0x00}

tcltest::test events-15.4.2 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -minutes 2
} {0xFF 0x54 0x05 0x00 0x02 0x00 0x00 0x00}

tcltest::test events-15.4.3 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -seconds 3
} {0xFF 0x54 0x05 0x00 0x00 0x03 0x00 0x00}

tcltest::test events-15.4.4 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -frames 4
} {0xFF 0x54 0x05 0x00 0x00 0x00 0x04 0x00}

tcltest::test events-15.4.5 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -framefractions 5
} {0xFF 0x54 0x05 0x00 0x00 0x00 0x00 0x05}

tcltest::test events-15.4.6 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -qwerty 10} msg
    set msg
} {Invalid option '-qwerty' for event of type 'smpte_offset'. Known options for this event type are: -hours -minutes -seconds -frames -framefractions}

tcltest::test events-15.4.7 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -hours 256} msg
    set msg
} {Invalid value '256' for option '-hours' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.4.8 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -minutes 256} msg
    set msg
} {Invalid value '256' for option '-minutes' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.4.9 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -seconds 256} msg
    set msg
} {Invalid value '256' for option '-seconds' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.4.10 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -frames 256} msg
    set msg
} {Invalid value '256' for option '-frames' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.4.11 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -framefractions 256} msg
    set msg
} {Invalid value '256' for option '-framefractions' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.4.12 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -hours -1} msg
    set msg
} {Invalid value '-1' for option '-hours' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.4.13 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -minutes -1} msg
    set msg
} {Invalid value '-1' for option '-minutes' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.4.14 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -seconds -1} msg
    set msg
} {Invalid value '-1' for option '-seconds' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.4.15 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -frames -1} msg
    set msg
} {Invalid value '-1' for option '-frames' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.4.16 {smpte_offset} {
    set e [midi::event smpte_offset]
    catch {midi::event::configure $e -framefractions -1} msg
    set msg
} {Invalid value '-1' for option '-framefractions' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.4.17 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5
} {0xFF 0x54 0x05 0x01 0x02 0x03 0x04 0x05}

tcltest::test events-15.4.18 {smpte_offset} {
    set e [midi::event smpte_offset]
    midi::event::configure $e -framefractions 5 -frames 4 -seconds 3 -minutes 2 -hours 1
} {0xFF 0x54 0x05 0x01 0x02 0x03 0x04 0x05}

tcltest::test events-15.5.1 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::cget $e -hours
} {1}

tcltest::test events-15.5.2 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::cget $e -minutes
} {2}

tcltest::test events-15.5.3 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::cget $e -seconds
} {3}

tcltest::test events-15.5.4 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::cget $e -frames
} {4}

tcltest::test events-15.5.5 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::cget $e -framefractions
} {5}

tcltest::test events-15.5.6 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'smpte_offset'. Known options for this event type are: -hours -minutes -seconds -frames -framefractions}

tcltest::test events-15.6 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::dump $e
} {smpte_offset hours 1, minutes 2, seconds 3, frames 4, framefractions 5}

tcltest::test events-15.7.1 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::validate $e
} {}

tcltest::test events-15.7.2 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate {0xFF 0x54 0x04 0x01 0x02 0x03 0x04}} msg
    set msg
} {smpte_offset event must have the value 0x05 as the third byte}

tcltest::test events-15.7.3 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate {0xFF 0x54 0x05 0x01 0x02 0x03 0x04}} msg
    set msg
} {number of elements in list does not match count}

tcltest::test events-15.8.1 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::validate_option $e -hours 10
} {}

tcltest::test events-15.8.2 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::validate_option $e -minutes 10
} {}

tcltest::test events-15.8.3 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::validate_option $e -seconds 10
} {}

tcltest::test events-15.8.4 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::validate_option $e -frames 10
} {}

tcltest::test events-15.8.5 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::validate_option $e -framefractions 10
} {}

tcltest::test events-15.8.6 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate_option $e -qwerty 23} msg
    set msg
} {Invalid option '-qwerty' for event of type 'smpte_offset'. Known options for this event type are: -hours -minutes -seconds -frames -framefractions}

tcltest::test events-15.8.7 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate_option $e -hours 256} msg
    set msg
} {Invalid value '256' for option '-hours' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.8.8 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate_option $e -minutes 256} msg
    set msg
} {Invalid value '256' for option '-minutes' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.8.9 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate_option $e -seconds 256} msg
    set msg
} {Invalid value '256' for option '-seconds' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.8.10 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate_option $e -frames 256} msg
    set msg
} {Invalid value '256' for option '-frames' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.8.11 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate_option $e -framefractions 256} msg
    set msg
} {Invalid value '256' for option '-framefractions' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.8.12 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate_option $e -hours -1} msg
    set msg
} {Invalid value '-1' for option '-hours' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.8.13 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate_option $e -minutes -1} msg
    set msg
} {Invalid value '-1' for option '-minutes' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.8.14 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate_option $e -seconds -1} msg
    set msg
} {Invalid value '-1' for option '-seconds' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.8.15 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate_option $e -frames -1} msg
    set msg
} {Invalid value '-1' for option '-frames' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.8.16 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    catch {midi::event::validate_option $e -framefractions -1} msg
    set msg
} {Invalid value '-1' for option '-framefractions' for event of type 'smpte_offset'. Value must be integer in range [0..255].}

tcltest::test events-15.9 {smpte_offset} {
    set e [midi::event smpte_offset -hours 1 -minutes 2 -seconds 3 -frames 4 -framefractions 5]
    midi::event::reset $e
} {0xFF 0x54 0x05 0x00 0x00 0x00 0x00 0x00}

tcltest::test events-15.10 {smpte_offset} {
    set e [midi::event smpte_offset]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta smpte_offset}

## time_signature

tcltest::test events-16.0 {time_signature} {
    midi::event time_signature
} {0xFF 0x58 0x04 0x00 0x00 0x00 0x00}

tcltest::test events-16.1.1 {time_signature} {
    midi::event time_signature -numerator 1
} {0xFF 0x58 0x04 0x01 0x00 0x00 0x00}

tcltest::test events-16.1.2 {time_signature} {
    midi::event time_signature -denominator 4
} {0xFF 0x58 0x04 0x00 0x02 0x00 0x00}

tcltest::test events-16.1.3 {time_signature} {
    midi::event time_signature -clocks_ticks_between_metronome_clicks 3
} {0xFF 0x58 0x04 0x00 0x00 0x03 0x00}

tcltest::test events-16.1.4 {time_signature} {
    midi::event time_signature -notated_32nd_notes_in_quarter_note 4
} {0xFF 0x58 0x04 0x00 0x00 0x00 0x04}

tcltest::test events-16.1.5 {time_signature} {
    midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4
} {0xFF 0x58 0x04 0x01 0x02 0x03 0x04}

tcltest::test events-16.1.6 {time_signature} {
    midi::event time_signature -notated_32nd_notes_in_quarter_note 4 -clocks_ticks_between_metronome_clicks 3 -denominator 4 -numerator 1
} {0xFF 0x58 0x04 0x01 0x02 0x03 0x04}

tcltest::test events-16.1.7 {time_signature} {
    catch {midi::event time_signature -numerator 256} msg
    set msg
} {Invalid value '256' for option '-numerator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.1.8 {time_signature} {
    catch {midi::event time_signature -denominator 256} msg
    set msg
} {Invalid value '256' for option '-denominator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.1.9 {time_signature} {
    catch {midi::event time_signature -clocks_ticks_between_metronome_clicks 256} msg
    set msg
} {Invalid value '256' for option '-clocks_ticks_between_metronome_clicks' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.1.10 {time_signature} {
    catch {midi::event time_signature -notated_32nd_notes_in_quarter_note 256} msg
    set msg
} {Invalid value '256' for option '-notated_32nd_notes_in_quarter_note' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.1.11 {time_signature} {
    catch {midi::event time_signature -numerator -1} msg
    set msg
} {Invalid value '-1' for option '-numerator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.1.12 {time_signature} {
    catch {midi::event time_signature -denominator -1} msg
    set msg
} {Invalid value '-1' for option '-denominator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.1.13 {time_signature} {
    catch {midi::event time_signature -clocks_ticks_between_metronome_clicks -1} msg
    set msg
} {Invalid value '-1' for option '-clocks_ticks_between_metronome_clicks' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.1.14 {time_signature} {
    catch {midi::event time_signature -notated_32nd_notes_in_quarter_note -1} msg
    set msg
} {Invalid value '-1' for option '-notated_32nd_notes_in_quarter_note' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.1.15 {time_signature} {
    catch {midi::event time_signature -qwerty -1} msg
    set msg
} {Invalid option '-qwerty' for event of type 'time_signature'. Known options for this event type are: -numerator -denominator -clocks_ticks_between_metronome_clicks -notated_32nd_notes_in_quarter_note}

tcltest::test events-16.2 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::configure $e
} {{-numerator 0 1} {-denominator 1 4} {-clocks_ticks_between_metronome_clicks 0 3} {-notated_32nd_notes_in_quarter_note 0 4}}

tcltest::test events-16.3.1 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::configure $e -numerator
} {-numerator 0 1}

tcltest::test events-16.3.2 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::configure $e -denominator
} {-denominator 1 4}

tcltest::test events-16.3.3 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::configure $e -clocks_ticks_between_metronome_clicks
} {-clocks_ticks_between_metronome_clicks 0 3}

tcltest::test events-16.3.4 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::configure $e -notated_32nd_notes_in_quarter_note
} {-notated_32nd_notes_in_quarter_note 0 4}

tcltest::test events-16.3.5 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'time_signature'. Known options for this event type are: -numerator -denominator -clocks_ticks_between_metronome_clicks -notated_32nd_notes_in_quarter_note}

tcltest::test events-16.4.1 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::configure $e -numerator 10
} {0xFF 0x58 0x04 0x0A 0x02 0x03 0x04}

tcltest::test events-16.4.2 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::configure $e -denominator 32
} {0xFF 0x58 0x04 0x01 0x05 0x03 0x04}

tcltest::test events-16.4.3 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::configure $e -clocks_ticks_between_metronome_clicks 11
} {0xFF 0x58 0x04 0x01 0x02 0x0B 0x04}

tcltest::test events-16.4.4 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::configure $e -notated_32nd_notes_in_quarter_note 12
} {0xFF 0x58 0x04 0x01 0x02 0x03 0x0C}

tcltest::test events-16.4.5 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::configure $e -numerator 256} msg
    set msg
} {Invalid value '256' for option '-numerator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.4.6 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::configure $e -denominator 256} msg
    set msg
} {Invalid value '256' for option '-denominator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.4.7 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::configure $e -clocks_ticks_between_metronome_clicks 256} msg
    set msg
} {Invalid value '256' for option '-clocks_ticks_between_metronome_clicks' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.4.8 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::configure $e -notated_32nd_notes_in_quarter_note 256} msg
    set msg
} {Invalid value '256' for option '-notated_32nd_notes_in_quarter_note' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.4.9 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::configure $e -numerator -1} msg
    set msg
} {Invalid value '-1' for option '-numerator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.4.10 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::configure $e -denominator -1} msg
    set msg
} {Invalid value '-1' for option '-denominator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.4.11 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::configure $e -clocks_ticks_between_metronome_clicks -1} msg
    set msg
} {Invalid value '-1' for option '-clocks_ticks_between_metronome_clicks' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.4.12 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::configure $e -notated_32nd_notes_in_quarter_note -1} msg
    set msg
} {Invalid value '-1' for option '-notated_32nd_notes_in_quarter_note' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.4.13 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::configure $e -qwerty -1} msg
    set msg
} {Invalid option '-qwerty' for event of type 'time_signature'. Known options for this event type are: -numerator -denominator -clocks_ticks_between_metronome_clicks -notated_32nd_notes_in_quarter_note}

tcltest::test events-16.5.1 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::cget $e -numerator
} {1}

tcltest::test events-16.5.2 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::cget $e -denominator
} {4}

tcltest::test events-16.5.3 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::cget $e -clocks_ticks_between_metronome_clicks
} {3}

tcltest::test events-16.5.4 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::cget $e -notated_32nd_notes_in_quarter_note
} {4}

tcltest::test events-16.5.5 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'time_signature'. Known options for this event type are: -numerator -denominator -clocks_ticks_between_metronome_clicks -notated_32nd_notes_in_quarter_note}

tcltest::test events-16.6 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::dump $e
} {time_signature 1/4, 3 clocks ticks between metronome clicks, 4 notated 32nd notes in quarter note}

tcltest::test events-16.7.1 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::validate $e
} {}

tcltest::test events-16.7.2 {time_signature} {
    catch {midi::event::validate {0xFF 0x58 0x00}} msg
    set msg
} {time_signature event must have the value 0x04 as the third byte}

tcltest::test events-16.7.3 {time_signature} {
    catch {midi::event::validate {0xFF 0x58 0x04}} msg
    set msg
} {number of elements in list does not match count}

tcltest::test events-16.8.1 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::validate_option $e -numerator 4
} {}

tcltest::test events-16.8.2 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::validate_option $e -denominator 16
} {} 

tcltest::test events-16.8.3 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::validate_option $e -clocks_ticks_between_metronome_clicks 40
} {}

tcltest::test events-16.8.4 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::validate_option $e -notated_32nd_notes_in_quarter_note 50
} {}

tcltest::test events-16.8.5 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::validate_option $e -numerator 256} msg
    set msg
} {Invalid value '256' for option '-numerator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.8.6 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::validate_option $e -denominator 256} msg
    set msg
} {Invalid value '256' for option '-denominator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.8.7 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::validate_option $e -clocks_ticks_between_metronome_clicks 256} msg
    set msg
} {Invalid value '256' for option '-clocks_ticks_between_metronome_clicks' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.8.8 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::validate_option $e -notated_32nd_notes_in_quarter_note 256} msg
    set msg
} {Invalid value '256' for option '-notated_32nd_notes_in_quarter_note' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.8.9 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::validate_option $e -numerator -1} msg
    set msg
} {Invalid value '-1' for option '-numerator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.8.10 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::validate_option $e -denominator -1} msg
    set msg
} {Invalid value '-1' for option '-denominator' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.8.11 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::validate_option $e -clocks_ticks_between_metronome_clicks -1} msg
    set msg
} {Invalid value '-1' for option '-clocks_ticks_between_metronome_clicks' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.8.12 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::validate_option $e -notated_32nd_notes_in_quarter_note -1} msg
    set msg
} {Invalid value '-1' for option '-notated_32nd_notes_in_quarter_note' for event of type 'time_signature'. Value must be integer in range [0..255].}

tcltest::test events-16.8.13 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    catch {midi::event::validate_option $e -qwerty -1} msg
    set msg
} {Invalid option '-qwerty' for event of type 'time_signature'. Known options for this event type are: -numerator -denominator -clocks_ticks_between_metronome_clicks -notated_32nd_notes_in_quarter_note}

tcltest::test events-16.9 {time_signature} {
    set e [midi::event time_signature -numerator 1 -denominator 4  -clocks_ticks_between_metronome_clicks 3  -notated_32nd_notes_in_quarter_note 4]
    midi::event::reset $e
} {0xFF 0x58 0x04 0x00 0x00 0x00 0x00}

tcltest::test events-16.10 {time_signature} {
    set e [midi::event time_signature]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta time_signature}

## key_signature

tcltest::test events-17.0 {key_signature} {
    midi::event key_signature
} {0xFF 0x59 0x02 0x00 0x00}

tcltest::test events-17.1.1 {key_signature} {
    midi::event key_signature -number_of_modifications -2
} {0xFF 0x59 0x02 0xFE 0x00}

tcltest::test events-17.1.2 {key_signature} {
    midi::event key_signature -scale 1
} {0xFF 0x59 0x02 0x00 0x01}

tcltest::test events-17.1.3 {key_signature} {
    midi::event key_signature -number_of_modifications 2 -scale 1
} {0xFF 0x59 0x02 0x02 0x01}

tcltest::test events-17.1.4 {key_signature} {
    midi::event key_signature -scale 1 -number_of_modifications 2
} {0xFF 0x59 0x02 0x02 0x01}

tcltest::test events-17.1.5 {key_signature} {
    catch {midi::event key_signature -qwerty 10} msg
    set msg
} {Invalid option '-qwerty' for event of type 'key_signature'. Known options for this event type are: -number_of_modifications -scale}

tcltest::test events-17.1.6 {key_signature} {
    catch {midi::event key_signature -number_of_modifications -8} msg
    set msg
} {Invalid value '-8' for option '-number_of_modifications' for event of type 'key_signature'. Value must be integer in range [-7..7].}

tcltest::test events-17.1.7 {key_signature} {
    catch {midi::event key_signature -number_of_modifications 8} msg
    set msg
} {Invalid value '8' for option '-number_of_modifications' for event of type 'key_signature'. Value must be integer in range [-7..7].}

tcltest::test events-17.1.8 {key_signature} {
    catch {midi::event key_signature -scale -1} msg
    set msg
} {Invalid value '-1' for option '-scale' for event of type 'key_signature'. Value must be 0 for 'major' or 1 for 'minor'.}

tcltest::test events-17.1.9 {key_signature} {
    catch {midi::event key_signature -scale 2} msg
    set msg
} {Invalid value '2' for option '-scale' for event of type 'key_signature'. Value must be 0 for 'major' or 1 for 'minor'.}

tcltest::test events-17.2 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::configure $e
} {{-number_of_modifications 0 2} {-scale 0 1}}

tcltest::test events-17.3.1 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::configure $e -number_of_modifications
} {-number_of_modifications 0 2}

tcltest::test events-17.3.2 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::configure $e -scale
} {-scale 0 1}

tcltest::test events-17.3.3 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'key_signature'. Known options for this event type are: -number_of_modifications -scale}

tcltest::test events-17.4.1 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::configure $e -number_of_modifications -6
} {0xFF 0x59 0x02 0xFA 0x01}

tcltest::test events-17.4.2 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::configure $e -scale 0
} {0xFF 0x59 0x02 0x02 0x00}

tcltest::test events-17.4.3 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::configure $e -number_of_modifications -6 -scale 0
} {0xFF 0x59 0x02 0xFA 0x00}

tcltest::test events-17.4.4 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::configure $e -number_of_modifications -8} msg
    set msg
} {Invalid value '-8' for option '-number_of_modifications' for event of type 'key_signature'. Value must be integer in range [-7..7].}

tcltest::test events-17.4.5 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::configure $e -number_of_modifications 8} msg
    set msg
} {Invalid value '8' for option '-number_of_modifications' for event of type 'key_signature'. Value must be integer in range [-7..7].}

tcltest::test events-17.4.6 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::configure $e -scale -1} msg
    set msg
} {Invalid value '-1' for option '-scale' for event of type 'key_signature'. Value must be 0 for 'major' or 1 for 'minor'.}

tcltest::test events-17.4.7 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::configure $e -scale 2} msg
    set msg
} {Invalid value '2' for option '-scale' for event of type 'key_signature'. Value must be 0 for 'major' or 1 for 'minor'.}

tcltest::test events-17.4.8 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::configure $e -qwerty 2} msg
    set msg
} {Invalid option '-qwerty' for event of type 'key_signature'. Known options for this event type are: -number_of_modifications -scale}

tcltest::test events-17.5.1 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::cget $e -number_of_modifications
} {2}

tcltest::test events-17.5.2 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::cget $e -scale
} {1}

tcltest::test events-17.5.3 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'key_signature'. Known options for this event type are: -number_of_modifications -scale}

tcltest::test events-17.6.1 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::dump $e
} {key_signature 2 sharps, minor}

tcltest::test events-17.6.2 {key_signature} {
    set e [midi::event key_signature -number_of_modifications -4 -scale 0]
    midi::event::dump $e
} {key_signature 4 flats, major}

tcltest::test events-17.7.1 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::validate $e
} {}

tcltest::test events-17.7.2 {key_signature} {
    catch {midi::event::validate {0xFF 0x59 0x00}} msg
    set msg
} {key_signature event must have the value 0x02 as the third byte}

tcltest::test events-17.7.3 {key_signature} {
    catch {midi::event::validate {0xFF 0x59 0x02}} msg
    set msg
} {number of elements in list does not match count}

tcltest::test events-17.7.4 {key_signature} {
    catch {midi::event::validate {0xFF 0x59 0x02 0x10 0x10}} msg
    set msg
} {key_signature must have value -7 to 7 for fifth byte}

tcltest::test events-17.7.5 {key_signature} {
    catch {midi::event::validate {0xFF 0x59 0x02 0x00 0x10}} msg
    set msg
} {key_signature must have value 0x0 or 0x1 as fifth byte}

tcltest::test events-17.8.1 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::validate_option $e -number_of_modifications 6
} {}

tcltest::test events-17.8.2 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::validate_option $e -scale 0
} {}

tcltest::test events-17.8.3 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::validate_option $e -number_of_modifications -8} msg
    set msg
} {Invalid value '-8' for option '-number_of_modifications' for event of type 'key_signature'. Value must be integer in range [-7..7].}

tcltest::test events-17.8.4 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::validate_option $e -number_of_modifications 8} msg
    set msg
} {Invalid value '8' for option '-number_of_modifications' for event of type 'key_signature'. Value must be integer in range [-7..7].}

tcltest::test events-17.8.5 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::validate_option $e -scale -1} msg
    set msg
} {Invalid value '-1' for option '-scale' for event of type 'key_signature'. Value must be 0 for 'major' or 1 for 'minor'.}

tcltest::test events-17.8.6 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::validate_option $e -scale 2} msg
    set msg
} {Invalid value '2' for option '-scale' for event of type 'key_signature'. Value must be 0 for 'major' or 1 for 'minor'.}

tcltest::test events-17.8.6 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    catch {midi::event::validate_option $e -qwerty 2} msg
    set msg
} {Invalid option '-qwerty' for event of type 'key_signature'. Known options for this event type are: -number_of_modifications -scale}

tcltest::test events-17.9 {key_signature} {
    set e [midi::event key_signature -number_of_modifications 2 -scale 1]
    midi::event::reset $e
} {0xFF 0x59 0x02 0x00 0x00}

tcltest::test events-17.10 {key_signature} {
    set e [midi::event key_signature]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta key_signature}

## sequencer_specific

tcltest::test events-18.0 {sequencer_specific} {
    midi::event sequencer_specific
} {0xFF 0x7F 0x00}

tcltest::test events-18.1.1 {sequencer_specific} {
    midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}
} {0xFF 0x7F 0x0A 0x01 0x02 0x03 0x04 0x05 0x00 0x09 0x08 0x07 0x06}

tcltest::test events-18.1.2 {sequencer_specific} {
    catch {midi::event sequencer_specific -qwerty 2} msg
    set msg
} {Invalid option '-qwerty' for event of type 'sequencer_specific'. Known options for this event type are: -data}

tcltest::test events-18.2 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    midi::event::configure $e
} {{-data {} {0x01 0x02 0x03 0x04 0x05 0x00 0x09 0x08 0x07 0x06}}}

tcltest::test events-18.3.1 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    midi::event::configure $e -data
} {-data {} {0x01 0x02 0x03 0x04 0x05 0x00 0x09 0x08 0x07 0x06}}

tcltest::test events-18.3.2 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'sequencer_specific'. Known options for this event type are: -data}

tcltest::test events-18.4.1 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    midi::event::configure $e -data {10 11 12}
} {0xFF 0x7F 0x03 0x0A 0x0B 0x0C}

tcltest::test events-18.4.2 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    catch {midi::event::configure $e -qwerty {10 11 12}} msg
    set msg
} {Invalid option '-qwerty' for event of type 'sequencer_specific'. Known options for this event type are: -data}

tcltest::test events-18.5.1 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    midi::event::cget $e -data
} {0x01 0x02 0x03 0x04 0x05 0x00 0x09 0x08 0x07 0x06}

tcltest::test events-18.5.2 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'sequencer_specific'. Known options for this event type are: -data}

tcltest::test events-18.6 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    midi::event::dump $e
} {sequencer_specific 0x01 0x02 0x03 0x04 0x05 0x00 0x09 0x08 0x07 0x06}

tcltest::test events-18.7.1 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    midi::event::validate $e
} {}

tcltest::test events-18.7.2 {sequencer_specific} {
    catch {midi::event::validate {0xFF 0x7F 0x00}} msg
    set msg
} {}

tcltest::test events-18.7.3 {sequencer_specific} {
    catch {midi::event::validate {0xFF 0x7F 0x0A}} msg
    set msg
} {data length should be 10 but it was 0}

tcltest::test events-18.7.4 {sequencer_specific} {
    catch {midi::event::validate {0xFF 0x7F 0x0A 0x01}} msg
    set msg
} {data length should be 10 but it was 1}

tcltest::test events-18.8.1 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    midi::event::validate_option $e -data {6 7 5 8 4 9}
} {}

tcltest::test events-18.8.2 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    catch {midi::event::validate_option $e -qwerty {6 7 5 8 4 9}} msg
    set msg
} {Invalid option '-qwerty' for event of type 'sequencer_specific'. Known options for this event type are: -data}

tcltest::test events-18.9 {sequencer_specific} {
    set e [midi::event sequencer_specific -data {1 2 3 4 5 0 9 8 7 6}]
    midi::event::reset $e
} {0xFF 0x7F 0x00}

tcltest::test events-18.10 {sequencer_specific} {
    set e [midi::event sequencer_specific]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta sequencer_specific}

## meta_unknown

tcltest::test events-19.0 {meta_unknown} {
    midi::event meta_unknown
} {0xFF 0x00 0x00}

tcltest::test events-19.1.1 {meta_unknown} {
    midi::event meta_unknown -meta_unknown_event_type 34
} {0xFF 0x22 0x00}

tcltest::test events-19.1.2 {meta_unknown} {
    midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}
} {0xFF 0x22 0x03 0x0A 0x14 0x1E}

tcltest::test events-19.1.3 {meta_unknown} {
    midi::event meta_unknown -data {10 20 30} -meta_unknown_event_type 34
} {0xFF 0x22 0x03 0x0A 0x14 0x1E}

tcltest::test events-19.1.4 {meta_unknown} {
    catch {midi::event meta_unknown -meta_unknown_event_type -1} msg
    set msg
} {Invalid value '-1' for option '-meta_unknown_event_type' for event of type 'meta_unknown'. Value must be integer in range [0..255].}

tcltest::test events-19.1.5 {meta_unknown} {
    catch {midi::event meta_unknown -meta_unknown_event_type 256} msg
    set msg
} {Invalid value '256' for option '-meta_unknown_event_type' for event of type 'meta_unknown'. Value must be integer in range [0..255].}

tcltest::test events-19.1.6 {meta_unknown} {
    catch {midi::event meta_unknown -qwerty 256} msg
    set msg
} {Invalid option '-qwerty' for event of type 'meta_unknown'. Known options for this event type are: -meta_unknown_event_type -data}

tcltest::test events-19.2 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::configure $e
} {{-meta_unknown_event_type 0 0x22} {-data {} {0x0A 0x14 0x1E}}}

tcltest::test events-19.3.1 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::configure $e -meta_unknown_event_type
} {-meta_unknown_event_type 0 0x22}

tcltest::test events-19.3.2 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::configure $e -data
} {-data {} {0x0A 0x14 0x1E}}

tcltest::test events-19.3.3 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'meta_unknown'. Known options for this event type are: -meta_unknown_event_type -data}

tcltest::test events-19.4.1 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::configure $e -meta_unknown_event_type 10
} {0xFF 0x0A 0x03 0x0A 0x14 0x1E}

tcltest::test events-19.4.2 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::configure $e -data {11 21 31}
} {0xFF 0x22 0x03 0x0B 0x15 0x1F}

tcltest::test events-19.4.3 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    catch {midi::event::configure $e -meta_unknown_event_type -1} msg
    set msg
} {Invalid value '-1' for option '-meta_unknown_event_type' for event of type 'meta_unknown'. Value must be integer in range [0..255].}

tcltest::test events-19.4.4 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    catch {midi::event::configure $e -meta_unknown_event_type 256} msg
    set msg
} {Invalid value '256' for option '-meta_unknown_event_type' for event of type 'meta_unknown'. Value must be integer in range [0..255].}

tcltest::test events-19.4.5 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    catch {midi::event::configure $e -qwerty 256} msg
    set msg
} {Invalid option '-qwerty' for event of type 'meta_unknown'. Known options for this event type are: -meta_unknown_event_type -data}

tcltest::test events-19.5.1 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::cget $e -meta_unknown_event_type
} {0x22}

tcltest::test events-19.5.2 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::cget $e -data
} {0x0A 0x14 0x1E}

tcltest::test events-19.5.3 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'meta_unknown'. Known options for this event type are: -meta_unknown_event_type -data}

tcltest::test events-19.6 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::dump $e
} {meta_unknown meta_unknown_event_type 0x22, data 0x0A 0x14 0x1E}

tcltest::test events-19.7.1 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::validate $e
} {}

tcltest::test events-19.7.2 {meta_unknown} {
    catch {midi::event::validate {0xFF 0x00 0x00}} msg
    set msg
} {}

tcltest::test events-19.7.3 {meta_unknown} {
    catch {midi::event::validate {0xFF 0x22 0x00}} msg
    set msg
} {}

tcltest::test events-19.7.4 {meta_unknown} {
    catch {midi::event::validate {0xFF 0x22 0x10}} msg
    set msg
} {data length should be 16 but it was 0}

tcltest::test events-19.7.5 {meta_unknown} {
    catch {midi::event::validate {0xFF 0x22 0x10 0x22 0x22 0x22 0x22 0x22}} msg
    set msg
} {data length should be 16 but it was 5}

tcltest::test events-19.7.6 {meta_unknown} {
    catch {midi::event::validate {0xFF 0x22 0x10 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22}} msg
    set msg
} {data length should be 16 but it was 20}

tcltest::test events-19.8.1 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::validate_option $e -meta_unknown_event_type 30
} {}

tcltest::test events-19.8.2 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::validate_option $e -data {1 4 8 4 0 5 12 6 89}
} {}

tcltest::test events-19.8.3 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    catch {midi::event::validate_option $e -meta_unknown_event_type -1} msg
    set msg
} {Invalid value '-1' for option '-meta_unknown_event_type' for event of type 'meta_unknown'. Value must be integer in range [0..255].}

tcltest::test events-19.8.4 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    catch {midi::event::validate_option $e -meta_unknown_event_type 256} msg
    set msg
} {Invalid value '256' for option '-meta_unknown_event_type' for event of type 'meta_unknown'. Value must be integer in range [0..255].}

tcltest::test events-19.8.5 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    catch {midi::event::validate_option $e -qwerty 256} msg
    set msg
} {Invalid option '-qwerty' for event of type 'meta_unknown'. Known options for this event type are: -meta_unknown_event_type -data}

tcltest::test events-19.9 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34 -data {10 20 30}]
    midi::event::reset $e
} {0xFF 0x00 0x00}

tcltest::test events-19.10 {meta_unknown} {
    set e [midi::event meta_unknown -meta_unknown_event_type 34]
    set r1 [midi::event::type $e]
    set r2 [midi::event::type_meta_event $e]
    list $r1 $r2
} {Meta meta_unknown}

## SysEx

tcltest::test events-20.0 {SysEx} {
    midi::event SysEx
} {0xF0 0x00}

tcltest::test events-20.1.1 {SysEx} {
    midi::event SysEx -sysex_event_type 244
} {0xF4 0x00}

tcltest::test events-20.1.2 {SysEx} {
    midi::event SysEx -sysex_event_type 244 -data {10 20 30}
} {0xF4 0x03 0x0A 0x14 0x1E}

tcltest::test events-20.1.3 {SysEx} {
    midi::event SysEx -data {10 20 30} -sysex_event_type 244
} {0xF4 0x03 0x0A 0x14 0x1E}

tcltest::test events-20.1.4 {SysEx} {
    catch {midi::event SysEx -sysex_event_type -1} msg
    set msg
} {Invalid value '-1' for option '-sysex_event_type' for event of type 'SysEx'. Value must be integer in range [240..255].}

tcltest::test events-20.1.5 {SysEx} {
    catch {midi::event SysEx -sysex_event_type 256} msg
    set msg
} {Invalid value '256' for option '-sysex_event_type' for event of type 'SysEx'. Value must be integer in range [240..255].}

tcltest::test events-20.1.6 {SysEx} {
    catch {midi::event SysEx -qwerty 256} msg
    set msg
} {Invalid option '-qwerty' for event of type 'SysEx'. Known options for this event type are: -sysex_event_type -data}

tcltest::test events-20.2 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::configure $e
} {{-sysex_event_type 0xF0 0xF4} {-data {} {0x0A 0x14 0x1E}}}

tcltest::test events-20.3.1 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::configure $e -sysex_event_type
} {-sysex_event_type 0xF0 0xF4}

tcltest::test events-20.3.2 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::configure $e -data
} {-data {} {0x0A 0x14 0x1E}}

tcltest::test events-20.3.3 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'SysEx'. Known options for this event type are: -sysex_event_type -data}

tcltest::test events-20.4.1 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::configure $e -sysex_event_type 245
} {0xF5 0x03 0x0A 0x14 0x1E}

tcltest::test events-20.4.2 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::configure $e -data {11 21 31}
} {0xF4 0x03 0x0B 0x15 0x1F}

tcltest::test events-20.4.3 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    catch {midi::event::configure $e -sysex_event_type -1} msg
    set msg
} {Invalid value '-1' for option '-sysex_event_type' for event of type 'SysEx'. Value must be integer in range [240..255].}

tcltest::test events-20.4.4 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    catch {midi::event::configure $e -sysex_event_type 256} msg
    set msg
} {Invalid value '256' for option '-sysex_event_type' for event of type 'SysEx'. Value must be integer in range [240..255].}

tcltest::test events-20.4.5 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    catch {midi::event::configure $e -qwerty 256} msg
    set msg
} {Invalid option '-qwerty' for event of type 'SysEx'. Known options for this event type are: -sysex_event_type -data}

tcltest::test events-20.5.1 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::cget $e -sysex_event_type
} {0xF4}

tcltest::test events-20.5.2 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::cget $e -data
} {0x0A 0x14 0x1E}

tcltest::test events-20.5.3 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    catch {midi::event::cget $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'SysEx'. Known options for this event type are: -sysex_event_type -data}

tcltest::test events-20.6 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::dump $e
} {SysEx sysex_event_type 0xF4, data 0x0A 0x14 0x1E}

tcltest::test events-20.7.1 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::validate $e
} {}

tcltest::test events-20.7.2 {SysEx} {
    catch {midi::event::validate {0xF4 0x00}} msg
    set msg
} {}

tcltest::test events-20.7.3 {SysEx} {
    catch {midi::event::validate {0xF4 0x10}} msg
    set msg
} {data length should be 16 but it was 0}

tcltest::test events-20.7.4 {SysEx} {
    catch {midi::event::validate {0xF4 0x10 0x22 0x22 0x22 0x22 0x22}} msg
    set msg
} {data length should be 16 but it was 5}

tcltest::test events-20.7.5 {SysEx} {
    catch {midi::event::validate {0xF4 0x10 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22 0x22}} msg
    set msg
} {data length should be 16 but it was 20}

tcltest::test events-20.8.1 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::validate_option $e -sysex_event_type 245
} {}

tcltest::test events-20.8.2 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::validate_option $e -data {1 4 8 4 0 5 12 6 89}
} {}

tcltest::test events-20.8.3 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    catch {midi::event::validate_option $e -sysex_event_type -1} msg
    set msg
} {Invalid value '-1' for option '-sysex_event_type' for event of type 'SysEx'. Value must be integer in range [240..255].}

tcltest::test events-20.8.4 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    catch {midi::event::validate_option $e -sysex_event_type 256} msg
    set msg
} {Invalid value '256' for option '-sysex_event_type' for event of type 'SysEx'. Value must be integer in range [240..255].}

tcltest::test events-20.8.5 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    catch {midi::event::validate_option $e -qwerty 256} msg
    set msg
} {Invalid option '-qwerty' for event of type 'SysEx'. Known options for this event type are: -sysex_event_type -data}

tcltest::test events-20.9 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244 -data {10 20 30}]
    midi::event::reset $e
} {0xF0 0x00}

tcltest::test events-20.10 {SysEx} {
    set e [midi::event SysEx -sysex_event_type 244]
    midi::event::type $e
} {SysEx}

## note_off

tcltest::test events-21.0 {note_off} {
    midi::event note_off
} {0x80 0x00 0x00}

tcltest::test events-21.1.1 {note_off} {
    midi::event note_off -note 50
} {0x80 0x32 0x00}

tcltest::test events-21.1.2 {note_off} {
    midi::event note_off -velocity 101
} {0x80 0x00 0x65}

tcltest::test events-21.1.3 {note_off} {
    midi::event note_off -channel 7
} {0x87 0x00 0x00}

tcltest::test events-21.1.4 {note_off} {
    midi::event note_off -channel 7 -note 50 -velocity 101
} {0x87 0x32 0x65}

tcltest::test events-21.1.5 {note_off} {
    midi::event note_off -velocity 101 -note 50 -channel 7
} {0x87 0x32 0x65}

tcltest::test events-21.1.6 {note_off} {
    catch {midi::event note_off -qwerty 50} msg
    set msg
} {Invalid option '-qwerty' for event of type 'note_off'. Known options for this event type are: -channel -note -velocity}

tcltest::test events-21.1.7 {note_off} {
    catch {midi::event note_off -note 128} msg
    set msg
} {Invalid value '128' for option '-note' for event of type 'note_off'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-21.1.8 {note_off} {
    catch {midi::event note_off -note -1} msg
    set msg
} {Invalid value '-1' for option '-note' for event of type 'note_off'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-21.1.9 {note_off} {
    catch {midi::event note_off -velocity 128} msg
    set msg
} {Invalid value '128' for option '-velocity' for event of type 'note_off'. Value must be integer in range [0..127].}

tcltest::test events-21.1.10 {note_off} {
    catch {midi::event note_off -velocity -1} msg
    set msg
} {Invalid value '-1' for option '-velocity' for event of type 'note_off'. Value must be integer in range [0..127].}

tcltest::test events-21.1.11 {note_off} {
    catch {midi::event note_off -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'note_off'. Value must be integer in range [0..15].}

tcltest::test events-21.1.12 {note_off} {
    catch {midi::event note_off -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'note_off'. Value must be integer in range [0..15].}

tcltest::test events-21.2 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::configure $e 
} {{-channel 0 0x07} {-note 0 0x32} {-velocity 0 0x65}}

tcltest::test events-21.3.1 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -channel
} {-channel 0 0x07}

tcltest::test events-21.3.2 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -note
} {-note 0 0x32}

tcltest::test events-21.3.3 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -velocity
} {-velocity 0 0x65}

tcltest::test events-21.3.4 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'note_off'. Known options for this event type are: -channel -note -velocity}

tcltest::test events-21.4.1 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -channel 8
} {0x88 0x32 0x65}

tcltest::test events-21.4.2 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -note 51
} {0x87 0x33 0x65}

tcltest::test events-21.4.3 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -velocity 102
} {0x87 0x32 0x66}

tcltest::test events-21.4.4 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -qwerty 102} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'note_off'. Known options for this event type are: -channel -note -velocity}

tcltest::test events-21.4.5 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'note_off'. Value must be integer in range [0..15].}

tcltest::test events-21.4.6 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'note_off'. Value must be integer in range [0..15].}

tcltest::test events-21.4.7 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -note -1} msg
    set msg
} {Invalid value '-1' for option '-note' for event of type 'note_off'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-21.4.8 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -note 128} msg
    set msg
} {Invalid value '128' for option '-note' for event of type 'note_off'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-21.4.9 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -velocity -1} msg
    set msg
} {Invalid value '-1' for option '-velocity' for event of type 'note_off'. Value must be integer in range [0..127].}

tcltest::test events-21.4.10 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -velocity 128} msg
    set msg
} {Invalid value '128' for option '-velocity' for event of type 'note_off'. Value must be integer in range [0..127].}

tcltest::test events-21.5.1 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::cget $e -channel
} {0x07}

tcltest::test events-21.5.2 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::cget $e -note
} {0x32}

tcltest::test events-21.5.3 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::cget $e -velocity
} {0x65}

tcltest::test events-21.5.4 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::cget $e -qwerty} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'note_off'. Known options for this event type are: -channel -note -velocity}

tcltest::test events-21.6 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::dump $e
} {note_off channel 0x07, note 0x32, velocity 0x65}

tcltest::test events-21.7.1 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::validate $e
} {}

tcltest::test events-21.7.2 {note_off} {
    catch {midi::event::validate {0x88}} msg
    set msg
} {Invalid value '' for option '-note' for event of type 'note_off'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-21.7.3 {note_off} {
    catch {midi::event::validate {0x88 0x20}} msg
    set msg
} {Invalid value '' for option '-velocity' for event of type 'note_off'. Value must be integer in range [0..127].}

tcltest::test events-21.7.4 {note_off} {
    catch {midi::event::validate {0x88 0x120 0x20}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-21.7.5 {note_off} {
    catch {midi::event::validate {0x88 0x20 0x120}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-21.8.1 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::validate_option $e -channel 4
} {}

tcltest::test events-21.8.2 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::validate_option $e -note 44
} {}

tcltest::test events-21.8.3 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::validate_option $e -velocity 84
} {}

tcltest::test events-21.8.4 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'note_off'. Value must be integer in range [0..15].}

tcltest::test events-21.8.5 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'note_off'. Value must be integer in range [0..15].}

tcltest::test events-21.8.6 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -note -1} msg
    set msg
} {Invalid value '-1' for option '-note' for event of type 'note_off'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-21.8.7 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -note 128} msg
    set msg
} {Invalid value '128' for option '-note' for event of type 'note_off'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-21.8.8 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -velocity -1} msg
    set msg
} {Invalid value '-1' for option '-velocity' for event of type 'note_off'. Value must be integer in range [0..127].}

tcltest::test events-21.8.9 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -velocity 128} msg
    set msg
} {Invalid value '128' for option '-velocity' for event of type 'note_off'. Value must be integer in range [0..127].}

tcltest::test events-21.8.10 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -qwerty test} msg
    set msg
} {Invalid option '-qwerty' for event of type 'note_off'. Known options for this event type are: -channel -note -velocity}

tcltest::test events-21.9 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::reset $e
} {0x80 0x00 0x00}

tcltest::test events-21.10 {note_off} {
    set e [midi::event note_off -channel 7 -note 50 -velocity 101]
    midi::event::type $e
} {note_off}

## note_on

tcltest::test events-22.0 {note_on} {
    midi::event note_on
} {0x90 0x00 0x00}

tcltest::test events-22.1.1 {note_on} {
    midi::event note_on -note 50
} {0x90 0x32 0x00}

tcltest::test events-22.1.2 {note_on} {
    midi::event note_on -velocity 101
} {0x90 0x00 0x65}

tcltest::test events-22.1.3 {note_on} {
    midi::event note_on -channel 7
} {0x97 0x00 0x00}

tcltest::test events-22.1.4 {note_on} {
    midi::event note_on -channel 7 -note 50 -velocity 101
} {0x97 0x32 0x65}

tcltest::test events-22.1.5 {note_on} {
    midi::event note_on -velocity 101 -note 50 -channel 7
} {0x97 0x32 0x65}

tcltest::test events-22.1.6 {note_on} {
    catch {midi::event note_on -qwerty 50} msg
    set msg
} {Invalid option '-qwerty' for event of type 'note_on'. Known options for this event type are: -channel -note -velocity}

tcltest::test events-22.1.7 {note_on} {
    catch {midi::event note_on -note 128} msg
    set msg
} {Invalid value '128' for option '-note' for event of type 'note_on'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-22.1.8 {note_on} {
    catch {midi::event note_on -note -1} msg
    set msg
} {Invalid value '-1' for option '-note' for event of type 'note_on'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-22.1.9 {note_on} {
    catch {midi::event note_on -velocity 128} msg
    set msg
} {Invalid value '128' for option '-velocity' for event of type 'note_on'. Value must be integer in range [0..127].}

tcltest::test events-22.1.10 {note_on} {
    catch {midi::event note_on -velocity -1} msg
    set msg
} {Invalid value '-1' for option '-velocity' for event of type 'note_on'. Value must be integer in range [0..127].}

tcltest::test events-22.1.11 {note_on} {
    catch {midi::event note_on -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'note_on'. Value must be integer in range [0..15].}

tcltest::test events-22.1.12 {note_on} {
    catch {midi::event note_on -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'note_on'. Value must be integer in range [0..15].}

tcltest::test events-22.2 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::configure $e 
} {{-channel 0 0x07} {-note 0 0x32} {-velocity 0 0x65}}

tcltest::test events-22.3.1 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -channel
} {-channel 0 0x07}

tcltest::test events-22.3.2 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -note
} {-note 0 0x32}

tcltest::test events-22.3.3 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -velocity
} {-velocity 0 0x65}

tcltest::test events-22.3.4 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'note_on'. Known options for this event type are: -channel -note -velocity}

tcltest::test events-22.4.1 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -channel 8
} {0x98 0x32 0x65}

tcltest::test events-22.4.2 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -note 51
} {0x97 0x33 0x65}

tcltest::test events-22.4.3 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::configure $e -velocity 102
} {0x97 0x32 0x66}

tcltest::test events-22.4.4 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -qwerty 102} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'note_on'. Known options for this event type are: -channel -note -velocity}

tcltest::test events-22.4.5 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'note_on'. Value must be integer in range [0..15].}

tcltest::test events-22.4.6 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'note_on'. Value must be integer in range [0..15].}

tcltest::test events-22.4.7 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -note -1} msg
    set msg
} {Invalid value '-1' for option '-note' for event of type 'note_on'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-22.4.8 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -note 128} msg
    set msg
} {Invalid value '128' for option '-note' for event of type 'note_on'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-22.4.9 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -velocity -1} msg
    set msg
} {Invalid value '-1' for option '-velocity' for event of type 'note_on'. Value must be integer in range [0..127].}

tcltest::test events-22.4.10 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::configure $e -velocity 128} msg
    set msg
} {Invalid value '128' for option '-velocity' for event of type 'note_on'. Value must be integer in range [0..127].}

tcltest::test events-22.5.1 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::cget $e -channel
} {0x07}

tcltest::test events-22.5.2 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::cget $e -note
} {0x32}

tcltest::test events-22.5.3 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::cget $e -velocity
} {0x65}

tcltest::test events-22.5.4 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::cget $e -qwerty} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'note_on'. Known options for this event type are: -channel -note -velocity}

tcltest::test events-22.6 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::dump $e
} {note_on channel 0x07, note 0x32, velocity 0x65}

tcltest::test events-22.7.1 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::validate $e
} {}

tcltest::test events-22.7.2 {note_on} {
    catch {midi::event::validate {0x98}} msg
    set msg
} {Invalid value '' for option '-note' for event of type 'note_on'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-22.7.3 {note_on} {
    catch {midi::event::validate {0x98 0x20}} msg
    set msg
} {Invalid value '' for option '-velocity' for event of type 'note_on'. Value must be integer in range [0..127].}

tcltest::test events-22.7.4 {note_on} {
    catch {midi::event::validate {0x98 0x120 0x20}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-22.7.5 {note_on} {
    catch {midi::event::validate {0x98 0x20 0x120}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-22.8.1 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::validate_option $e -channel 4
} {}

tcltest::test events-22.8.2 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::validate_option $e -note 44
} {}

tcltest::test events-22.8.3 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::validate_option $e -velocity 84
} {}

tcltest::test events-22.8.4 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'note_on'. Value must be integer in range [0..15].}

tcltest::test events-22.8.5 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'note_on'. Value must be integer in range [0..15].}

tcltest::test events-22.8.6 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -note -1} msg
    set msg
} {Invalid value '-1' for option '-note' for event of type 'note_on'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-22.8.7 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -note 128} msg
    set msg
} {Invalid value '128' for option '-note' for event of type 'note_on'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-22.8.8 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -velocity -1} msg
    set msg
} {Invalid value '-1' for option '-velocity' for event of type 'note_on'. Value must be integer in range [0..127].}

tcltest::test events-22.8.9 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -velocity 128} msg
    set msg
} {Invalid value '128' for option '-velocity' for event of type 'note_on'. Value must be integer in range [0..127].}

tcltest::test events-22.8.10 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    catch {midi::event::validate_option $e -qwerty test} msg
    set msg
} {Invalid option '-qwerty' for event of type 'note_on'. Known options for this event type are: -channel -note -velocity}

tcltest::test events-22.9 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::reset $e
} {0x90 0x00 0x00}

tcltest::test events-22.10 {note_on} {
    set e [midi::event note_on -channel 7 -note 50 -velocity 101]
    midi::event::type $e
} {note_on}

## note_aftertouch

tcltest::test events-23.0 {note_aftertouch} {
    midi::event note_aftertouch
} {0xA0 0x00 0x00}

tcltest::test events-23.1.1 {note_aftertouch} {
    midi::event note_aftertouch -note 50
} {0xA0 0x32 0x00}

tcltest::test events-23.1.2 {note_aftertouch} {
    midi::event note_aftertouch -amount 101
} {0xA0 0x00 0x65}

tcltest::test events-23.1.3 {note_aftertouch} {
    midi::event note_aftertouch -channel 7
} {0xA7 0x00 0x00}

tcltest::test events-23.1.4 {note_aftertouch} {
    midi::event note_aftertouch -channel 7 -note 50 -amount 101
} {0xA7 0x32 0x65}

tcltest::test events-23.1.5 {note_aftertouch} {
    midi::event note_aftertouch -amount 101 -note 50 -channel 7
} {0xA7 0x32 0x65}

tcltest::test events-23.1.6 {note_aftertouch} {
    catch {midi::event note_aftertouch -qwerty 50} msg
    set msg
} {Invalid option '-qwerty' for event of type 'note_aftertouch'. Known options for this event type are: -channel -note -amount}

tcltest::test events-23.1.7 {note_aftertouch} {
    catch {midi::event note_aftertouch -note 128} msg
    set msg
} {Invalid value '128' for option '-note' for event of type 'note_aftertouch'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-23.1.8 {note_aftertouch} {
    catch {midi::event note_aftertouch -note -1} msg
    set msg
} {Invalid value '-1' for option '-note' for event of type 'note_aftertouch'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-23.1.9 {note_aftertouch} {
    catch {midi::event note_aftertouch -amount 128} msg
    set msg
} {Invalid value '128' for option '-amount' for event of type 'note_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-23.1.10 {note_aftertouch} {
    catch {midi::event note_aftertouch -amount -1} msg
    set msg
} {Invalid value '-1' for option '-amount' for event of type 'note_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-23.1.11 {note_aftertouch} {
    catch {midi::event note_aftertouch -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'note_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-23.1.12 {note_aftertouch} {
    catch {midi::event note_aftertouch -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'note_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-23.2 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::configure $e 
} {{-channel 0 0x07} {-note 0 0x32} {-amount 0 0x65}}

tcltest::test events-23.3.1 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::configure $e -channel
} {-channel 0 0x07}

tcltest::test events-23.3.2 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::configure $e -note
} {-note 0 0x32}

tcltest::test events-23.3.3 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::configure $e -amount
} {-amount 0 0x65}

tcltest::test events-23.3.4 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'note_aftertouch'. Known options for this event type are: -channel -note -amount}

tcltest::test events-23.4.1 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::configure $e -channel 8
} {0xA8 0x32 0x65}

tcltest::test events-23.4.2 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::configure $e -note 51
} {0xA7 0x33 0x65}

tcltest::test events-23.4.3 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::configure $e -amount 102
} {0xA7 0x32 0x66}

tcltest::test events-23.4.4 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::configure $e -qwerty 102} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'note_aftertouch'. Known options for this event type are: -channel -note -amount}

tcltest::test events-23.4.5 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::configure $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'note_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-23.4.6 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::configure $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'note_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-23.4.7 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::configure $e -note -1} msg
    set msg
} {Invalid value '-1' for option '-note' for event of type 'note_aftertouch'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-23.4.8 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::configure $e -note 128} msg
    set msg
} {Invalid value '128' for option '-note' for event of type 'note_aftertouch'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-23.4.9 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::configure $e -amount -1} msg
    set msg
} {Invalid value '-1' for option '-amount' for event of type 'note_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-23.4.10 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::configure $e -amount 128} msg
    set msg
} {Invalid value '128' for option '-amount' for event of type 'note_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-23.5.1 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::cget $e -channel
} {0x07}

tcltest::test events-23.5.2 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::cget $e -note
} {0x32}

tcltest::test events-23.5.3 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::cget $e -amount
} {0x65}

tcltest::test events-23.5.4 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::cget $e -qwerty} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'note_aftertouch'. Known options for this event type are: -channel -note -amount}

tcltest::test events-23.6 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::dump $e
} {note_aftertouch channel 0x07, note 0x32, amount 0x65}

tcltest::test events-23.7.1 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::validate $e
} {}

tcltest::test events-23.7.2 {note_aftertouch} {
    catch {midi::event::validate {0xA8}} msg
    set msg
} {Invalid value '' for option '-note' for event of type 'note_aftertouch'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-23.7.3 {note_aftertouch} {
    catch {midi::event::validate {0xA8 0x20}} msg
    set msg
} {Invalid value '' for option '-amount' for event of type 'note_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-23.7.4 {note_aftertouch} {
    catch {midi::event::validate {0xA8 0x120 0x20}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-23.7.5 {note_aftertouch} {
    catch {midi::event::validate {0xA8 0x20 0x120}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-23.8.1 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::validate_option $e -channel 4
} {}

tcltest::test events-23.8.2 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::validate_option $e -note 44
} {}

tcltest::test events-23.8.3 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::validate_option $e -amount 84
} {}

tcltest::test events-23.8.4 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::validate_option $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'note_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-23.8.5 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::validate_option $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'note_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-23.8.6 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::validate_option $e -note -1} msg
    set msg
} {Invalid value '-1' for option '-note' for event of type 'note_aftertouch'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-23.8.7 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::validate_option $e -note 128} msg
    set msg
} {Invalid value '128' for option '-note' for event of type 'note_aftertouch'. Value must be an integer in range [0..127], a valid note name or a valid drum sound name.}

tcltest::test events-23.8.8 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::validate_option $e -amount -1} msg
    set msg
} {Invalid value '-1' for option '-amount' for event of type 'note_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-23.8.9 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::validate_option $e -amount 128} msg
    set msg
} {Invalid value '128' for option '-amount' for event of type 'note_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-23.8.10 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    catch {midi::event::validate_option $e -qwerty test} msg
    set msg
} {Invalid option '-qwerty' for event of type 'note_aftertouch'. Known options for this event type are: -channel -note -amount}

tcltest::test events-23.9 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::reset $e
} {0xA0 0x00 0x00}

tcltest::test events-23.10 {note_aftertouch} {
    set e [midi::event note_aftertouch -channel 7 -note 50 -amount 101]
    midi::event::type $e
} {note_aftertouch}

## controller

tcltest::test events-24.0 {controller} {
    midi::event controller
} {0xB0 0x00 0x00}

tcltest::test events-24.1.1 {controller} {
    midi::event controller -controller 4
} {0xB0 0x04 0x00}

tcltest::test events-24.1.2 {controller} {
    midi::event controller -value 101
} {0xB0 0x00 0x65}

tcltest::test events-24.1.3 {controller} {
    midi::event controller -channel 7
} {0xB7 0x00 0x00}

tcltest::test events-24.1.4 {controller} {
    midi::event controller -channel 7 -controller 4 -value 101
} {0xB7 0x04 0x65}

tcltest::test events-24.1.5 {controller} {
    midi::event controller -value 101 -controller 4 -channel 7
} {0xB7 0x04 0x65}

tcltest::test events-24.1.6 {controller} {
    catch {midi::event controller -qwerty 50} msg
    set msg
} {Invalid option '-qwerty' for event of type 'controller'. Known options for this event type are: -channel -controller -value}

tcltest::test events-24.1.7 {controller} {
    catch {midi::event controller -controller 128} msg
    set msg
} {Invalid value '128' for option '-controller' for event of type 'controller'. Value must be an integer in range [0..127].}

tcltest::test events-24.1.8 {controller} {
    catch {midi::event controller -controller -1} msg
    set msg
} {Invalid value '-1' for option '-controller' for event of type 'controller'. Value must be an integer in range [0..127].}

tcltest::test events-24.1.9 {controller} {
    catch {midi::event controller -value 128} msg
    set msg
} {Invalid value '128' for option '-value' for event of type 'controller'. Value must be integer in range [0..127].}

tcltest::test events-24.1.10 {controller} {
    catch {midi::event controller -value -1} msg
    set msg
} {Invalid value '-1' for option '-value' for event of type 'controller'. Value must be integer in range [0..127].}

tcltest::test events-24.1.11 {controller} {
    catch {midi::event controller -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'controller'. Value must be integer in range [0..15].}

tcltest::test events-24.1.12 {controller} {
    catch {midi::event controller -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'controller'. Value must be integer in range [0..15].}

tcltest::test events-24.2 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::configure $e 
} {{-channel 0 0x07} {-controller 0 0x04} {-value 0 0x65}}

tcltest::test events-24.3.1 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::configure $e -channel
} {-channel 0 0x07}

tcltest::test events-24.3.2 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::configure $e -controller
} {-controller 0 0x04}

tcltest::test events-24.3.3 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::configure $e -value
} {-value 0 0x65}

tcltest::test events-24.3.4 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'controller'. Known options for this event type are: -channel -controller -value}

tcltest::test events-24.4.1 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::configure $e -channel 8
} {0xB8 0x04 0x65}

tcltest::test events-24.4.2 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::configure $e -controller 5
} {0xB7 0x05 0x65}

tcltest::test events-24.4.3 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::configure $e -value 102
} {0xB7 0x04 0x66}

tcltest::test events-24.4.4 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::configure $e -qwerty 102} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'controller'. Known options for this event type are: -channel -controller -value}

tcltest::test events-24.4.5 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::configure $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'controller'. Value must be integer in range [0..15].}

tcltest::test events-24.4.6 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::configure $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'controller'. Value must be integer in range [0..15].}

tcltest::test events-24.4.7 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::configure $e -controller -1} msg
    set msg
} {Invalid value '-1' for option '-controller' for event of type 'controller'. Value must be an integer in range [0..127].}

tcltest::test events-24.4.8 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::configure $e -controller 128} msg
    set msg
} {Invalid value '128' for option '-controller' for event of type 'controller'. Value must be an integer in range [0..127].}

tcltest::test events-24.4.9 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::configure $e -value -1} msg
    set msg
} {Invalid value '-1' for option '-value' for event of type 'controller'. Value must be integer in range [0..127].}

tcltest::test events-24.4.10 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::configure $e -value 128} msg
    set msg
} {Invalid value '128' for option '-value' for event of type 'controller'. Value must be integer in range [0..127].}

tcltest::test events-24.5.1 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::cget $e -channel
} {0x07}

tcltest::test events-24.5.2 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::cget $e -controller
} {0x04}

tcltest::test events-24.5.3 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::cget $e -value
} {0x65}

tcltest::test events-24.5.4 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::cget $e -qwerty} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'controller'. Known options for this event type are: -channel -controller -value}

tcltest::test events-24.6 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::dump $e
} {controller channel 0x07, controller 0x04, value 0x65}

tcltest::test events-24.7.1 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::validate $e
} {}

tcltest::test events-24.7.2 {controller} {
    catch {midi::event::validate {0xB8}} msg
    set msg
} {Invalid value '' for option '-controller' for event of type 'controller'. Unknown controller name ''.}

tcltest::test events-24.7.3 {controller} {
    catch {midi::event::validate {0xB8 0x20}} msg
    set msg
} {Invalid value '' for option '-value' for event of type 'controller'. Value must be integer in range [0..127].}

tcltest::test events-24.7.4 {controller} {
    catch {midi::event::validate {0xB8 0x120 0x20}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-24.7.5 {controller} {
    catch {midi::event::validate {0xB8 0x20 0x120}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-24.8.1 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::validate_option $e -channel 4
} {}

tcltest::test events-24.8.2 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::validate_option $e -controller 5
} {}

tcltest::test events-24.8.3 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::validate_option $e -value 84
} {}

tcltest::test events-24.8.4 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::validate_option $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'controller'. Value must be integer in range [0..15].}

tcltest::test events-24.8.5 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::validate_option $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'controller'. Value must be integer in range [0..15].}

tcltest::test events-24.8.6 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::validate_option $e -controller -1} msg
    set msg
} {Invalid value '-1' for option '-controller' for event of type 'controller'. Value must be an integer in range [0..127].}

tcltest::test events-24.8.7 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::validate_option $e -controller 128} msg
    set msg
} {Invalid value '128' for option '-controller' for event of type 'controller'. Value must be an integer in range [0..127].}

tcltest::test events-24.8.8 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::validate_option $e -value -1} msg
    set msg
} {Invalid value '-1' for option '-value' for event of type 'controller'. Value must be integer in range [0..127].}

tcltest::test events-24.8.9 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::validate_option $e -value 128} msg
    set msg
} {Invalid value '128' for option '-value' for event of type 'controller'. Value must be integer in range [0..127].}

tcltest::test events-24.8.10 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    catch {midi::event::validate_option $e -qwerty test} msg
    set msg
} {Invalid option '-qwerty' for event of type 'controller'. Known options for this event type are: -channel -controller -value}

tcltest::test events-24.9 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::reset $e
} {0xB0 0x00 0x00}

tcltest::test events-24.10 {controller} {
    set e [midi::event controller -channel 7 -controller 4 -value 101]
    midi::event::type $e
} {controller}

tcltest::test events-24.11 {controller} {
    # Fine adjustment to modulation wheel (num = 33)
    set bytes [midi::event controller \
        -controller 0x21 \
        -value 0 \
        ]
    midi::event::validate $bytes
    set bytes
} {0xB0 0x21 0x00}

tcltest::test events-24.12 {controller} {
    # Fine adjustment to modulation wheel (num = 33)
    # This controller value is outside of the
    # valid range of 0 to 127 for this element. 
    list [catch {midi::event controller \
        -controller 0x21 \
        -value 0xF3 \
        } err] $err
} {1 {Invalid value '0xF3' for option '-value' for event of type 'controller'. Value must be integer in range [0..127].}}

tcltest::test events-24.13 {controller} {
    # Undefined controller is still a valid message
    set bytes [midi::event controller \
        -controller 51 \
        -value 0 \
        ]
    midi::event::validate $bytes
    set bytes
} {0xB0 0x33 0x00}

## program_change

tcltest::test events-25.0 {program_change} {
    midi::event program_change
} {0xC0 0x00}

tcltest::test events-25.1.1 {program_change} {
    midi::event program_change -program 50
} {0xC0 0x32}

tcltest::test events-25.1.3 {program_change} {
    midi::event program_change -channel 7
} {0xC7 0x00}

tcltest::test events-25.1.4 {program_change} {
    midi::event program_change -channel 7 -program 50
} {0xC7 0x32}

tcltest::test events-25.1.5 {program_change} {
    midi::event program_change -program 50 -channel 7
} {0xC7 0x32}

tcltest::test events-25.1.6 {program_change} {
    catch {midi::event program_change -qwerty 50} msg
    set msg
} {Invalid option '-qwerty' for event of type 'program_change'. Known options for this event type are: -channel -program}

tcltest::test events-25.1.7 {program_change} {
    catch {midi::event program_change -program 128} msg
    set msg
} {Invalid value '128' for option '-program' for event of type 'program_change'. Value must be an integer in range [0..127] or a valid program name.}

tcltest::test events-25.1.8 {program_change} {
    catch {midi::event program_change -program -1} msg
    set msg
} {Invalid value '-1' for option '-program' for event of type 'program_change'. Value must be an integer in range [0..127] or a valid program name.}

tcltest::test events-25.1.11 {program_change} {
    catch {midi::event program_change -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'program_change'. Value must be integer in range [0..15].}

tcltest::test events-25.1.12 {program_change} {
    catch {midi::event program_change -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'program_change'. Value must be integer in range [0..15].}

tcltest::test events-25.2 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::configure $e 
} {{-channel 0 0x07} {-program 0 0x32}}

tcltest::test events-25.3.1 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::configure $e -channel
} {-channel 0 0x07}

tcltest::test events-25.3.2 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::configure $e -program
} {-program 0 0x32}

tcltest::test events-25.3.4 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'program_change'. Known options for this event type are: -channel -program}

tcltest::test events-25.4.1 {program_change} {
    set e [midi::event program_change -channel 7 -program 50 ]
    midi::event::configure $e -channel 8
} {0xC8 0x32}

tcltest::test events-25.4.2 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::configure $e -program 51
} {0xC7 0x33}

tcltest::test events-25.4.4 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::configure $e -qwerty 102} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'program_change'. Known options for this event type are: -channel -program}

tcltest::test events-25.4.5 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::configure $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'program_change'. Value must be integer in range [0..15].}

tcltest::test events-25.4.6 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::configure $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'program_change'. Value must be integer in range [0..15].}

tcltest::test events-25.4.7 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::configure $e -program -1} msg
    set msg
} {Invalid value '-1' for option '-program' for event of type 'program_change'. Value must be an integer in range [0..127] or a valid program name.}

tcltest::test events-25.4.8 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::configure $e -program 128} msg
    set msg
} {Invalid value '128' for option '-program' for event of type 'program_change'. Value must be an integer in range [0..127] or a valid program name.}

tcltest::test events-25.5.1 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::cget $e -channel
} {0x07}

tcltest::test events-25.5.2 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::cget $e -program
} {0x32}

tcltest::test events-25.5.4 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::cget $e -qwerty} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'program_change'. Known options for this event type are: -channel -program}

tcltest::test events-25.6 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::dump $e
} {program_change channel 0x07, program 0x32}

tcltest::test events-25.7.1 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::validate $e
} {}

tcltest::test events-25.7.2 {program_change} {
    catch {midi::event::validate {0xC8}} msg
    set msg
} {Invalid value '' for option '-program' for event of type 'program_change'. Value must be an integer in range [0..127] or a valid program name.}

tcltest::test events-25.7.4 {program_change} {
    catch {midi::event::validate {0xC8 0x120}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-25.8.1 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::validate_option $e -channel 4
} {}

tcltest::test events-25.8.2 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::validate_option $e -program 44
} {}

tcltest::test events-25.8.4 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::validate_option $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'program_change'. Value must be integer in range [0..15].}

tcltest::test events-25.8.5 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::validate_option $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'program_change'. Value must be integer in range [0..15].}

tcltest::test events-25.8.6 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::validate_option $e -program -1} msg
    set msg
} {Invalid value '-1' for option '-program' for event of type 'program_change'. Value must be an integer in range [0..127] or a valid program name.}

tcltest::test events-25.8.7 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::validate_option $e -program 128} msg
    set msg
} {Invalid value '128' for option '-program' for event of type 'program_change'. Value must be an integer in range [0..127] or a valid program name.}

tcltest::test events-25.8.10 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    catch {midi::event::validate_option $e -qwerty test} msg
    set msg
} {Invalid option '-qwerty' for event of type 'program_change'. Known options for this event type are: -channel -program}

tcltest::test events-25.9 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::reset $e
} {0xC0 0x00}

tcltest::test events-25.10 {program_change} {
    set e [midi::event program_change -channel 7 -program 50]
    midi::event::type $e
} {program_change}

## channel_aftertouch

tcltest::test events-26.0 {channel_aftertouch} {
    midi::event channel_aftertouch
} {0xD0 0x00}

tcltest::test events-26.1.1 {channel_aftertouch} {
    midi::event channel_aftertouch -amount 50
} {0xD0 0x32}

tcltest::test events-26.1.3 {channel_aftertouch} {
    midi::event channel_aftertouch -channel 7
} {0xD7 0x00}

tcltest::test events-26.1.4 {channel_aftertouch} {
    midi::event channel_aftertouch -channel 7 -amount 50
} {0xD7 0x32}

tcltest::test events-26.1.5 {channel_aftertouch} {
    midi::event channel_aftertouch -amount 50 -channel 7
} {0xD7 0x32}

tcltest::test events-26.1.6 {channel_aftertouch} {
    catch {midi::event channel_aftertouch -qwerty 50} msg
    set msg
} {Invalid option '-qwerty' for event of type 'channel_aftertouch'. Known options for this event type are: -channel -amount}

tcltest::test events-26.1.7 {channel_aftertouch} {
    catch {midi::event channel_aftertouch -amount 128} msg
    set msg
} {Invalid value '128' for option '-amount' for event of type 'channel_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-26.1.8 {channel_aftertouch} {
    catch {midi::event channel_aftertouch -amount -1} msg
    set msg
} {Invalid value '-1' for option '-amount' for event of type 'channel_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-26.1.11 {channel_aftertouch} {
    catch {midi::event channel_aftertouch -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'channel_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-26.1.12 {channel_aftertouch} {
    catch {midi::event channel_aftertouch -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'channel_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-26.2 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::configure $e 
} {{-channel 0 0x07} {-amount 0 0x32}}

tcltest::test events-26.3.1 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::configure $e -channel
} {-channel 0 0x07}

tcltest::test events-26.3.2 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::configure $e -amount
} {-amount 0 0x32}

tcltest::test events-26.3.4 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'channel_aftertouch'. Known options for this event type are: -channel -amount}

tcltest::test events-26.4.1 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50 ]
    midi::event::configure $e -channel 8
} {0xD8 0x32}

tcltest::test events-26.4.2 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::configure $e -amount 51
} {0xD7 0x33}

tcltest::test events-26.4.4 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::configure $e -qwerty 102} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'channel_aftertouch'. Known options for this event type are: -channel -amount}

tcltest::test events-26.4.5 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::configure $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'channel_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-26.4.6 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::configure $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'channel_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-26.4.7 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::configure $e -amount -1} msg
    set msg
} {Invalid value '-1' for option '-amount' for event of type 'channel_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-26.4.8 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::configure $e -amount 128} msg
    set msg
} {Invalid value '128' for option '-amount' for event of type 'channel_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-26.5.1 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::cget $e -channel
} {0x07}

tcltest::test events-26.5.2 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::cget $e -amount
} {0x32}

tcltest::test events-26.5.4 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::cget $e -qwerty} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'channel_aftertouch'. Known options for this event type are: -channel -amount}

tcltest::test events-26.6 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::dump $e
} {channel_aftertouch channel 0x07, amount 0x32}

tcltest::test events-26.7.1 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::validate $e
} {}

tcltest::test events-26.7.2 {channel_aftertouch} {
    catch {midi::event::validate {0xD8}} msg
    set msg
} {Invalid value '' for option '-amount' for event of type 'channel_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-26.7.4 {channel_aftertouch} {
    catch {midi::event::validate {0xD8 0x120}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-26.8.1 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::validate_option $e -channel 4
} {}

tcltest::test events-26.8.2 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::validate_option $e -amount 44
} {}

tcltest::test events-26.8.4 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::validate_option $e -channel -1} msg
    set msg
} {Invalid value '-1' for option '-channel' for event of type 'channel_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-26.8.5 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::validate_option $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'channel_aftertouch'. Value must be integer in range [0..15].}

tcltest::test events-26.8.6 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::validate_option $e -amount -1} msg
    set msg
} {Invalid value '-1' for option '-amount' for event of type 'channel_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-26.8.7 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::validate_option $e -amount 128} msg
    set msg
} {Invalid value '128' for option '-amount' for event of type 'channel_aftertouch'. Value must be integer in range [0..127].}

tcltest::test events-26.8.10 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    catch {midi::event::validate_option $e -qwerty test} msg
    set msg
} {Invalid option '-qwerty' for event of type 'channel_aftertouch'. Known options for this event type are: -channel -amount}

tcltest::test events-26.9 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::reset $e
} {0xD0 0x00}

tcltest::test events-26.10 {channel_aftertouch} {
    set e [midi::event channel_aftertouch -channel 7 -amount 50]
    midi::event::type $e
} {channel_aftertouch}

## pitch_bend

tcltest::test events-27.0 {pitch_bend} {
    midi::event pitch_bend
} {0xE0 0x00 0x40}

tcltest::test events-27.1.1 {pitch_bend} {
    midi::event pitch_bend -amount 5000
} {0xE0 0x08 0x67}

tcltest::test events-27.1.3 {pitch_bend} {
    midi::event pitch_bend -channel 7
} {0xE7 0x00 0x40}

tcltest::test events-27.1.4 {pitch_bend} {
    midi::event pitch_bend -channel 7 -amount 5000
} {0xE7 0x08 0x67}

tcltest::test events-27.1.5 {pitch_bend} {
    midi::event pitch_bend -amount 5000 -channel 7
} {0xE7 0x08 0x67}

tcltest::test events-27.1.6 {pitch_bend} {
    catch {midi::event pitch_bend -qwerty 5000} msg
    set msg
} {Invalid option '-qwerty' for event of type 'pitch_bend'. Known options for this event type are: -channel -amount}

tcltest::test events-27.1.7 {pitch_bend} {
    catch {midi::event pitch_bend -amount 8192} msg
    set msg
} {Invalid value '8192' for option '-amount' for event of type 'pitch_bend'. Value must be integer in range [-8192..8191].}

tcltest::test events-27.1.8 {pitch_bend} {
    catch {midi::event pitch_bend -amount -8193} msg
    set msg
} {Invalid value '-8193' for option '-amount' for event of type 'pitch_bend'. Value must be integer in range [-8192..8191].}

tcltest::test events-27.1.11 {pitch_bend} {
    catch {midi::event pitch_bend -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'pitch_bend'. Value must be integer in range [0..15].}

tcltest::test events-27.1.12 {pitch_bend} {
    catch {midi::event pitch_bend -channel -8193} msg
    set msg
} {Invalid value '-8193' for option '-channel' for event of type 'pitch_bend'. Value must be integer in range [0..15].}

tcltest::test events-27.1.13 {pitch_bend} {
    midi::event pitch_bend -channel 7 -amount -5000
} {0xE7 0x78 0x18}

tcltest::test events-27.2 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::configure $e 
} {{-channel 0 0x07} {-amount 0 5000}}

tcltest::test events-27.3.1 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::configure $e -channel
} {-channel 0 0x07}

tcltest::test events-27.3.2 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::configure $e -amount
} {-amount 0 5000}

tcltest::test events-27.3.4 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::configure $e -qwerty} msg
    set msg
} {Invalid option '-qwerty' for event of type 'pitch_bend'. Known options for this event type are: -channel -amount}

tcltest::test events-27.4.1 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000 ]
    midi::event::configure $e -channel 8
} {0xE8 0x08 0x67}

tcltest::test events-27.4.2 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::configure $e -amount 51
} {0xE7 0x33 0x40}

tcltest::test events-27.4.4 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::configure $e -qwerty 102} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'pitch_bend'. Known options for this event type are: -channel -amount}

tcltest::test events-27.4.5 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::configure $e -channel -8193} msg
    set msg
} {Invalid value '-8193' for option '-channel' for event of type 'pitch_bend'. Value must be integer in range [0..15].}

tcltest::test events-27.4.6 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::configure $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'pitch_bend'. Value must be integer in range [0..15].}

tcltest::test events-27.4.7 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::configure $e -amount -8193} msg
    set msg
} {Invalid value '-8193' for option '-amount' for event of type 'pitch_bend'. Value must be integer in range [-8192..8191].}

tcltest::test events-27.4.8 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::configure $e -amount 8192} msg
    set msg
} {Invalid value '8192' for option '-amount' for event of type 'pitch_bend'. Value must be integer in range [-8192..8191].}

tcltest::test events-27.5.1 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::cget $e -channel
} {0x07}

tcltest::test events-27.5.2 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::cget $e -amount
} {5000}

tcltest::test events-27.5.4 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::cget $e -qwerty} msg 
    set msg
} {Invalid option '-qwerty' for event of type 'pitch_bend'. Known options for this event type are: -channel -amount}

tcltest::test events-27.6 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::dump $e
} {pitch_bend channel 0x07, amount 5000}

tcltest::test events-27.7.1 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::validate $e
} {}

tcltest::test events-27.7.2 {pitch_bend} {
    catch {midi::event::validate {0xE8}} msg
    set msg
} {lsb must be integer}

tcltest::test events-27.7.3 {pitch_bend} {
    catch {midi::event::validate {0xE8 0x10}} msg
    set msg
} {msb must be integer}

tcltest::test events-27.7.4 {pitch_bend} {
    catch {midi::event::validate {0xE8 0x120}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-27.7.5 {pitch_bend} {
    catch {midi::event::validate {0xE8 0x10 0x120}} msg
    set msg
} {byte value 0x120 out of range [0..255]}

tcltest::test events-27.8.1 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::validate_option $e -channel 4
} {}

tcltest::test events-27.8.2 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::validate_option $e -amount 44
} {}

tcltest::test events-27.8.4 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::validate_option $e -channel -8193} msg
    set msg
} {Invalid value '-8193' for option '-channel' for event of type 'pitch_bend'. Value must be integer in range [0..15].}

tcltest::test events-27.8.5 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::validate_option $e -channel 16} msg
    set msg
} {Invalid value '16' for option '-channel' for event of type 'pitch_bend'. Value must be integer in range [0..15].}

tcltest::test events-27.8.6 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::validate_option $e -amount -8193} msg
    set msg
} {Invalid value '-8193' for option '-amount' for event of type 'pitch_bend'. Value must be integer in range [-8192..8191].}

tcltest::test events-27.8.7 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::validate_option $e -amount 8192} msg
    set msg
} {Invalid value '8192' for option '-amount' for event of type 'pitch_bend'. Value must be integer in range [-8192..8191].}

tcltest::test events-27.8.10 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    catch {midi::event::validate_option $e -qwerty test} msg
    set msg
} {Invalid option '-qwerty' for event of type 'pitch_bend'. Known options for this event type are: -channel -amount}

tcltest::test events-27.9 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::reset $e
} {0xE0 0x00 0x40}

tcltest::test events-27.10 {pitch_bend} {
    set e [midi::event pitch_bend -channel 7 -amount 5000]
    midi::event::type $e
} {pitch_bend}

#
# Clicks tests
#

tcltest::test clicks-1 {clicks} {
    set f [midi::file -time_division_type ticks_per_beat -ticks_per_beat 480]
    set l {}
    foreach nl [lsort -dictionary [array names ::midi::knownDuration]] {
	lappend l $nl [$f clicks $nl]
    }
    $f destroy
    set l
} {0 0 1/1 1920 1/1. 2880 1/2 960 1/2. 1440 1/2t 640 1/4 480 1/4. 720 1/4t 320 1/8 240 1/8. 360 1/8t 160 1/16 120 1/16. 180 1/16t 80 1/32 60 1/32. 90 1/32t 40 1/64 30 1/64. 45 1/64t 20}

tcltest::test clicks-2 {clicks} {
    set f [midi::file -time_division_type ticks_per_beat -ticks_per_beat 960]
    set l {}
    foreach nl [lsort -dictionary [array names ::midi::knownDuration]] {
	lappend l $nl [$f clicks $nl]
    }
    $f destroy
    set l
} {0 0 1/1 3840 1/1. 5760 1/2 1920 1/2. 2880 1/2t 1280 1/4 960 1/4. 1440 1/4t 640 1/8 480 1/8. 720 1/8t 320 1/16 240 1/16. 360 1/16t 160 1/32 120 1/32. 180 1/32t 80 1/64 60 1/64. 90 1/64t 40}

tcltest::test clicks-3 {clicks} {
    set f [midi::file -time_division_type ticks_per_beat -ticks_per_beat 480]
    catch {$f clicks qwerty} msg
    set msg
} {Unknown note length: qwerty, try any of 0 1/1 1/1. 1/2 1/2. 1/2t 1/4 1/4. 1/4t 1/8 1/8. 1/8t 1/16 1/16. 1/16t 1/32 1/32. 1/32t 1/64 1/64. 1/64t}

#
# Note tests
#

tcltest::test note_number-1 {note by name} {
    set l {}
    foreach n {0 60 127 c-1 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c6 c###bbb6 b#5} {
	lappend l $n [::midi::note_number $n]
    }
    set l
} {0 0 60 60 127 127 c-1 0 c0 12 c1 24 c2 36 c3 48 c4 60 c5 72 c6 84 c7 96 c8 108 c9 120 c6 84 c###bbb6 84 b#5 84}

tcltest::test note_number-2 {note by drum sound name} {
    set l {}
    foreach n $::midi::knownDrumSounds {
	lappend l $n [::midi::note_number $n]
    }
    set l
} {{acoustic bass drum} 35 {bass drum 1} 36 {side stick} 37 {acoustic snare} 38 {hand clap} 39 {electric snare} 40 {low floor tom} 41 {closed hi-hat} 42 {high floor tom} 43 {pedal hi-hat} 44 {low tom} 45 {open hi-hat} 46 {low-mid tom} 47 {hi-mid tom} 48 {crash cymbal 1} 49 {high tom} 50 {ride cymbal 1} 51 {chinese cymbal} 52 {ride bell} 53 tambourine 54 {splash cymbal} 55 cowbell 56 {crash cymbal 2} 57 vibraslap 58 {ride cymbal 2} 59 {hi bongo} 60 {low bongo} 61 {mute hi conga} 62 {open hi conga} 63 {low conga} 64 {high timbale} 65 {low timbale} 66 {high agogo} 67 {low agogo} 68 cabasa 69 maracas 70 {short whistle} 71 {long whistle} 72 {short guiro} 73 {long guiro} 74 claves 75 {hi wood block} 76 {low wood block} 77 {mute cuica} 78 {open cuica} 79 {mute triangle} 80 {open triangle} 81}

tcltest::test note_number-3 {note by name} {
    catch {midi::note_number qwerty} msg
    set msg
} {Unknown note name, note number or drum sound name 'qwerty'}

tcltest::test note_number-4 {note by name} {
    catch {midi::note_number -1} msg
    set msg
} {Note '-1' is out of range [0..127]}

tcltest::test note_number-5 {note by name} {
    catch {midi::note_number 128} msg
    set msg
} {Note '128' is out of range [0..127]}

#
# Program tests
#

tcltest::test program_number-1 {program by name} {
    set l {}
    foreach n $::midi::knownPrograms {
	lappend l $n [::midi::program_number $n]
    }
    set l
} {{acoustic grand} 0 {bright acoustic} 1 {electric grand} 2 honky-tonk 3 {electric piano 1} 4 {electric piano 2} 5 harpsichord 6 clavinet 7 celesta 8 glockenspiel 9 {music box} 10 vibraphone 11 marimba 12 xylophone 13 {tubular bells} 14 dulcimer 15 {drawbar organ} 16 {percussive organ} 17 {rock organ} 18 {church organ} 19 {reed organ} 20 accoridan 21 harmonica 22 {tango accordian} 23 {nylon string guitar} 24 {steel string guitar} 25 {electric jazz guitar} 26 {electric clean guitar} 27 {electric muted guitar} 28 {overdriven guitar} 29 {distortion guitar} 30 {guitar harmonics} 31 {acoustic bass} 32 {electric bass(finger)} 33 {electric bass(pick)} 34 {fretless bass} 35 {slap bass 1} 36 {slap bass 2} 37 {synth bass 1} 38 {synth bass 2} 39 violin 40 viola 41 cello 42 contrabass 43 {tremolo strings} 44 {pizzicato strings} 45 {orchestral strings} 46 timpani 47 {string ensemble 1} 48 {string ensemble 2} 49 {synthstrings 1} 50 {synthstrings 2} 51 {choir aahs} 52 {voice oohs} 53 {synth voice} 54 {orchestra hit} 55 trumpet 56 trombone 57 tuba 58 {muted trumpet} 59 {french horn} 60 {brass section} 61 {synthbrass 1} 62 {synthbrass 2} 63 {soprano sax} 64 {alto sax} 65 {tenor sax} 66 {baritone sax} 67 oboe 68 {english horn} 69 bassoon 70 clarinet 71 piccolo 72 flute 73 recorder 74 {pan flute} 75 {blown bottle} 76 skakuhachi 77 whistle 78 ocarina 79 {lead 1 (square)} 80 {lead 2 (sawtooth)} 81 {lead 3 (calliope)} 82 {lead 4 (chiff)} 83 {lead 5 (charang)} 84 {lead 6 (voice)} 85 {lead 7 (fifths)} 86 {lead 8 (bass+lead)} 87 {pad 1 (new age)} 88 {pad 2 (warm)} 89 {pad 3 (polysynth)} 90 {pad 4 (choir)} 91 {pad 5 (bowed)} 92 {pad 6 (metallic)} 93 {pad 7 (halo)} 94 {pad 8 (sweep)} 95 {fx 1 (rain)} 96 {fx 2 (soundtrack)} 97 {fx 3 (crystal)} 98 {fx 4 (atmosphere)} 99 {fx 5 (brightness)} 100 {fx 6 (goblins)} 101 {fx 7 (echoes)} 102 {fx 8 (sci-fi)} 103 sitar 104 banjo 105 shamisen 106 koto 107 kalimba 108 bagpipe 109 fiddle 110 shanai 111 {tinkle bell} 112 agogo 113 {steel drums} 114 woodblock 115 {taiko drum} 116 {melodic tom} 117 {synth drum} 118 {reverse cymbal} 119 {guitar fret noise} 120 {breath noise} 121 seashore 122 {bird tweet} 123 {telephone ring} 124 helicopter 125 applause 126 gunshot 127}

tcltest::test program_number-2 {program by name} {
    catch {midi::program_number qwerty} msg
    set msg
} {Unknown program name or number 'qwerty'}

tcltest::test program_number-3 {program by name} {
    catch {midi::program_number -1} msg
    set msg
} {Program '-1' is out of range [0..127]}

tcltest::test program_number-4 {program by name} {
    catch {midi::program_number 128} msg
    set msg
} {Program '128' is out of range [0..127]}

#
# Controller tests
#

tcltest::test controller_number-1 {controller by name} {
    catch {unset map}
    foreach name [array names midi::knownControllerNames] {
        set num [midi::controller_number $name]
        set map($num) $name
    }
    set l {}
    foreach num [lsort -integer -increasing [array names map]] {
        lappend l $map($num) $num
    }
    catch {unset map}
    set l
} {{bank select (coarse)} 0 {modulation wheel (coarse)} 1 {breath controller (coarse)} 2 {foot pedal (coarse)} 4 {portamento time (coarse)} 5 {data entry (coarse)} 6 {volume (coarse)} 7 {balance (coarse)} 8 {pan position (coarse)} 10 {expression (coarse)} 11 {effect control 1 (coarse)} 12 {effect control 2 (coarse)} 13 {general purpose slider 1} 16 {general purpose slider 2} 17 {general purpose slider 3} 18 {general purpose slider 4} 19 {bank select (fine)} 32 {modulation wheel (fine)} 33 {breath controller (fine)} 34 {foot pedal (fine)} 36 {portamento time (fine)} 37 {data entry (fine)} 38 {volume (fine)} 39 {balance (fine)} 40 {pan position (fine)} 42 {expression (fine)} 43 {effect control 1 (fine)} 44 {effect control 2 (fine)} 45 {general purpose slider 1 (fine)} 48 {general purpose slider 2 (fine)} 49 {general purpose slider 3 (fine)} 50 {general purpose slider 4 (fine)} 51 {hold pedal (on/off)} 64 {portamento (on/off)} 65 {sustenuto pedal (on/off)} 66 {soft pedal (on/off)} 67 {legato pedal (on/off)} 68 {hold 2 pedal (on/off)} 69 {sound variation} 70 {sound timbre} 71 {sound release time} 72 {sound attack time} 73 {sound brightness} 74 {sound control 6} 75 {sound control 7} 76 {sound control 8} 77 {sound control 9} 78 {sound control 10} 79 {general purpose button 1 (on/off)} 80 {general purpose button 2 (on/off)} 81 {general purpose button 3 (on/off)} 82 {general purpose button 4 (on/off)} 83 {effects level} 91 {tremulo level} 92 {chorus level} 93 {celeste level} 94 {phaser level} 95 {ata button increment} 96 {data button decrement} 97 {non-registered parameter (fine)} 98 {non-registered parameter (coarse)} 99 {registered parameter (fine)} 100 {registered parameter (coarse)} 101 {all sound off} 120 {all controllers off} 121 {local keyboard (on/off)} 122 {all notes off} 123 {omni mode off} 124 {omni mode on} 125 {mono operation} 126 {poly operation} 127}

tcltest::test controller_number-2 {controller by name} {
    catch {midi::controller_number qwerty} msg
    set msg
} {Unknown controller name 'qwerty'}

tcltest::test controller_number-3 {controller by name} {
    catch {midi::controller_number 0} msg
    set msg
} {integer controller number should not be passed to this method}

##
## Track tests
##

tcltest::test track-1.0 {} -body {
    set t [midi::track]
} -cleanup {
    $t destroy
} -match {regexp} -result {miditrack*}

tcltest::test track-1.1 {} -setup {
    set t [midi::track]
} -body {
    $t destroy
} -result {}

tcltest::test track-1.2 {} -setup {
    set c_on  [midi::event note_on  -channel 0 -note 60 -velocity 127]
    set c_off [midi::event note_off -channel 0 -note 60 -velocity 127]
    set eot   [midi::event end_of_track]
    set elist [list [list 0 $c_on] [list 10 $c_off] [list 20 $c_on] [list 30 $c_off] [list 40 $eot]]
} -body {
    set t [midi::track -events $elist]
} -cleanup {
    $t destroy
} -match {regexp} -result {miditrack*}

tcltest::test track-1.3 {} -setup {
    set elist [list [list 0 0]]
} -body {
    set t [midi::track -events $elist]
} -returnCodes {error} -result {Invalid value '0 0' for option '-events' of midi track: invalid channel event : 0x00. Not a valid midi event: invalid channel event : 0x00}

tcltest::test track-1.4 {} -body {
    set t [midi::track -qwerty 1]
} -returnCodes {error} -result {Unknown option '-qwerty' for midi track.  Only these options are supported: -events}

tcltest::test track-1.5 {} -body {
    set t [midi::track -events]
} -cleanup {
    $t destroy
} -match {regexp} -result {miditrack*}

tcltest::test track-2.1 {} -setup {
    set t [midi::track]
} -body {
    $t configure
} -cleanup {
    $t destroy
} -result {{-events {} {}}}

tcltest::test track-2.2 {} -setup {
    set c_on  [midi::event note_on  -channel 0 -note 60 -velocity 127]
    set c_off [midi::event note_off -channel 0 -note 60 -velocity 127]
    set eot   [midi::event end_of_track]
    set elist [list [list 0 $c_on] [list 10 $c_off] [list 20 $c_on] [list 30 $c_off] [list 40 $eot]]
    set t [midi::track -events $elist]
} -body {
    $t configure
} -cleanup {
    $t destroy
} -result {{-events {} {{0 {0x90 0x3C 0x7F}} {10 {0x80 0x3C 0x7F}} {20 {0x90 0x3C 0x7F}} {30 {0x80 0x3C 0x7F}} {40 {0xFF 0x2F 0x00}}}}}

tcltest::test track-3.1 {} -setup {
    set t [midi::track]
} -body {
    $t configure -events
} -cleanup {
    $t destroy
} -result {-events {} {}}

tcltest::test track-3.2 {} -setup {
    set c_on  [midi::event note_on  -channel 0 -note 60 -velocity 127]
    set c_off [midi::event note_off -channel 0 -note 60 -velocity 127]
    set eot   [midi::event end_of_track]
    set elist [list [list 0 $c_on] [list 10 $c_off] [list 20 $c_on] [list 30 $c_off] [list 40 $eot]]
    set t [midi::track -events $elist]
} -body {
    $t configure -events
} -cleanup {
    $t destroy
} -result {-events {} {{0 {0x90 0x3C 0x7F}} {10 {0x80 0x3C 0x7F}} {20 {0x90 0x3C 0x7F}} {30 {0x80 0x3C 0x7F}} {40 {0xFF 0x2F 0x00}}}}

tcltest::test track-3.3 {} -setup {
    set t [midi::track]
} -body {
    $t configure -qwerty
} -cleanup {
    $t destroy
} -returnCodes {error} -result {Unknown option '-qwerty' for midi track.  Only these options are supported: -events}

tcltest::test track-4.1 {} -setup {
    set c_on  [midi::event note_on  -channel 0 -note 60 -velocity 127]
    set c_off [midi::event note_off -channel 0 -note 60 -velocity 127]
    set eot   [midi::event end_of_track]
    set t [midi::track]
    set elist [list [list 0 $c_on] [list 10 $c_off] [list 20 $c_on] [list 30 $c_off] [list 40 $eot]]
} -body {
    $t configure -events $elist
} -cleanup {
    $t destroy
} -result {}

tcltest::test track-4.2 {} -setup {
    set elist [list [list 0 0]]
    set t [midi::track]
} -body {
    $t configure -events $elist
} -returnCodes {error} -result {Invalid value '0 0' for option '-events' of midi track: invalid channel event : 0x00. Not a valid midi event: invalid channel event : 0x00}

tcltest::test track-4.3 {} -setup {
    set t [midi::track]
} -body {
    $t configure -qwerty 0
} -returnCodes {error} -result {Unknown option '-qwerty' for midi track.  Only these options are supported: -events}

tcltest::test track-4.4 {} -setup {
    set t [midi::track]
} -body {
    $t configure -qwerty
} -returnCodes {error} -result {Unknown option '-qwerty' for midi track.  Only these options are supported: -events}

tcltest::test track-5.1 {} -setup {
    set t [midi::track]
} -body {
    $t cget -events
} -cleanup {
    $t destroy
} -result {}

tcltest::test track-5.2 {} -setup {
    set c_on  [midi::event note_on  -channel 0 -note 60 -velocity 127]
    set c_off [midi::event note_off -channel 0 -note 60 -velocity 127]
    set eot   [midi::event end_of_track]
    set elist [list [list 0 $c_on] [list 10 $c_off] [list 20 $c_on] [list 30 $c_off] [list 40 $eot]]
    set t [midi::track -events $elist]
} -body {
    $t cget -events
} -cleanup {
    $t destroy
} -result {{0 {0x90 0x3C 0x7F}} {10 {0x80 0x3C 0x7F}} {20 {0x90 0x3C 0x7F}} {30 {0x80 0x3C 0x7F}} {40 {0xFF 0x2F 0x00}}}

tcltest::test track-5.3 {} -setup {
    set t [midi::track]
} -body {
    $t cget -qwerty
} -cleanup {
    $t destroy
} -returnCodes {error} -result {Unknown option '-qwerty' for midi track.  Only these options are supported: -events}

tcltest::test track-6.1 {} -setup {
    set c_on  [midi::event note_on  -channel 0 -note 60 -velocity 127]
    set c_off [midi::event note_off -channel 0 -note 60 -velocity 127]
    set eot   [midi::event end_of_track]
    set elist [list [list 0 $c_on] [list 10 $c_off] [list 20 $c_on] [list 30 $c_off] [list 40 $eot]]
    set t [midi::track -events $elist]
} -body {
    $t dump
} -cleanup {
    $t destroy
} -result {MTrk

  Delta time    Absolute time Event
  ------------- ------------- ----------------------------------------
              0             0 note_on channel 0x00, note 0x3C, velocity 0x7F
             10            10 note_off channel 0x00, note 0x3C, velocity 0x7F
             20            30 note_on channel 0x00, note 0x3C, velocity 0x7F
             30            60 note_off channel 0x00, note 0x3C, velocity 0x7F
             40           100 end_of_track

}

tcltest::test track-6.2 {} -setup {
    set c_on  [midi::event note_on  -channel 0 -note 60 -velocity 127]
    set c_off [midi::event note_off -channel 0 -note 60 -velocity 127]
    set eot   [midi::event end_of_track]
    set elist [list [list 0 $c_on] [list 10 $c_off] [list 20 $c_on] [list 30 $c_off] [list 40 $eot]]
    set t [midi::track -events $elist]
} -body {
    midi::make_abs [$t cget -events]
} -cleanup {
    $t destroy
} -result {{0 {0x90 0x3C 0x7F}} {10 {0x80 0x3C 0x7F}} {30 {0x90 0x3C 0x7F}} {60 {0x80 0x3C 0x7F}} {100 {0xFF 0x2F 0x00}}}

tcltest::test track-7 {} -setup {
    set c_on  [midi::event note_on  -channel 0 -note 60 -velocity 127]
    set c_off [midi::event note_off -channel 0 -note 60 -velocity 127]
    set eot   [midi::event end_of_track]
    set elist [list [list 0 $c_on] [list 10 $c_off] [list 20 $c_on] [list 30 $c_off] [list 40 $eot]]
    set t [midi::track -events $elist]
} -body {
    $t validate
} -cleanup {
    $t destroy
} -result {}

tcltest::test track-8.1 {} -setup {
    set c_on  [midi::event note_on  -channel 0 -note 60 -velocity 127]
    set c_off [midi::event note_off -channel 0 -note 60 -velocity 127]
    set eot   [midi::event end_of_track]
    set elist [list [list 0 $c_on] [list 10 $c_off] [list 20 $c_on] [list 30 $c_off] [list 40 $eot]]
} -body {
    midi::track::validate_option -events $elist
} -result {}

tcltest::test track-8.2 {create track object with invalid event setup} -setup {
    set elist [list [list 0 0]]
} -body {
    midi::track::validate_option -events $elist
} -returnCodes {error} -result {Invalid value '0 0' for option '-events' of midi track: invalid channel event : 0x00. Not a valid midi event: invalid channel event : 0x00}

tcltest::test track-8.3 {create track object with invalid event setup} -body {
    midi::track::validate_option -qwerty 0
} -returnCodes {error} -result {Invalid option '-qwerty' for midi track. Only these options are supported: -events}

tcltest::test track-8.4 {create track object with invalid event setup} -body {
    midi::track::validate_option -qwerty
} -returnCodes {error} -result {wrong # args: should be "midi::track::validate_option option value"}

tcltest::test track-9.1 {} -setup {
    set c_on  [midi::event note_on  -channel 0 -note 60 -velocity 127]
    set c_off [midi::event note_off -channel 0 -note 60 -velocity 127]
    set eot   [midi::event end_of_track]
    set elist [list [list 0 $c_on] [list 10 $c_off] [list 20 $c_on] [list 30 $c_off] [list 40 $eot]]
    set t [midi::track -events $elist]
} -body {
    $t reset
    midi::make_abs [$t cget -events]
} -cleanup {
    $t destroy
} -result {}

tcltest::test track-9.2 {} -setup {
    set c_on  [midi::event note_on  -channel 0 -note 60 -velocity 127]
    set c_off [midi::event note_off -channel 0 -note 60 -velocity 127]
    set eot   [midi::event end_of_track]
    set elist [list [list 0 $c_on] [list 10 $c_off] [list 20 $c_on] [list 30 $c_off] [list 40 $eot]]
    set t1 [midi::track -events $elist]
    set t2 [midi::track -events $elist]
} -body {
    $t1 reset
    midi::make_abs [$t2 cget -events]
} -cleanup {
    $t1 destroy
    $t2 destroy
} -result {{0 {0x90 0x3C 0x7F}} {10 {0x80 0x3C 0x7F}} {30 {0x90 0x3C 0x7F}} {60 {0x80 0x3C 0x7F}} {100 {0xFF 0x2F 0x00}}}

tcltest::test track-10.1 {} -setup {
    # Read MIDI test file that contains a single track with a controller event
    # for every controller number in the range 0 to 127. This test checks that
    # any valid controller number can be parsed by this module.
    if {0} {
        # Script to generate this test file:
        set mid [midi::file]
        set track [midi::track]
        $mid configure -tracks [list $track]

        set events [list]
        for {set cnum 0} {$cnum < 128} {incr cnum} {
            set bytes [midi::event controller -controller $cnum -value 0]
            lappend events [list 0 $bytes]
        }
        $track configure -events $events
        set filename "MIDI/controllers.mid"
        $mid write $filename
        $mid destroy
    }

    set filename MIDI/controllers.mid
    set mhandle [midi::file]
    $mhandle read $filename
} -body {
    set track [lindex [$mhandle cget -tracks] 0]
    set events [$track cget -events]

    set cnum_list [list]
    foreach etuple $events {
        set delta [lindex $etuple 0]
        if {$delta != 0} {
             error "got delta time of \"$delta\", expected time to be zero"
        }
        set bytes [lindex $etuple 1]

        set controller [lindex $bytes 0]
        if {$controller != "0xB0"} {
            error "expected controller number to be \"0xB0\", got \"$controller\""
        }
        set cnum [lindex $bytes 1]
        set value [lindex $bytes 2]
        if {$value != 0} {
            error "expected controller value to be 0, got \"$value\""
        }
        lappend cnum_list [expr {int($cnum)}]
    }
    set cnum_list
} -cleanup {
    $mhandle destroy
} -result {0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127}

##
## File tests
##

##
## Clean up
##

::tcltest::cleanupTests
return

